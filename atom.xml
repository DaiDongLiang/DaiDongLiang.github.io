<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MagicWolf</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://magicwolf.xyz/"/>
  <updated>2016-12-28T13:03:13.761Z</updated>
  <id>http://magicwolf.xyz/</id>
  
  <author>
    <name>MagicWolf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring AOP浅析(二) AOP实现分析</title>
    <link href="http://magicwolf.xyz/2016/spring-aop-two/"/>
    <id>http://magicwolf.xyz/2016/spring-aop-two/</id>
    <published>2016-06-09T16:00:00.000Z</published>
    <updated>2016-12-28T13:03:13.761Z</updated>
    
    <content type="html"><![CDATA[<p>前文介绍了代理模式及实现，但想要实现一个完整的AOP框架还远远不够，接下来我们来分析一下Spring是如何实现AOP的。</p>
<h2 id="1-AOP体系结构"><a href="#1-AOP体系结构" class="headerlink" title="1 AOP体系结构"></a>1 AOP体系结构</h2><p>下图AOP联盟定义的AOP体系结构，大致分为从使用到实现的三个层次。整篇文章都将按照这三个层次进行分析<br><img src="http://qiniu.magicalwolf.com/aop-system.png" alt=""></p>
<a id="more"></a>
<h3 id="1-1-层次3-语言和开发环境"><a href="#1-1-层次3-语言和开发环境" class="headerlink" title="1.1 层次3:语言和开发环境"></a>1.1 层次3:语言和开发环境</h3><ul>
<li>基础:可以视为待增强对象</li>
<li>切面:通常包含对于基础的增强应用</li>
<li>配置:指配置环境或编织配置,将基础和切面结合起来，从而实现对目标对象的编织实现</li>
</ul>
<p>Spring使用Java语言来实现增强对象和切面，并为这两者提供配置环境;对于编织配置，可以使用IoC容器来完成，而Ioc恰恰是Spring的强项。</p>
<h3 id="1-2-层次2-面向方面系统"><a href="#1-2-层次2-面向方面系统" class="headerlink" title="1.2 层次2:面向方面系统"></a>1.2 层次2:面向方面系统</h3><p>面向方面系统为上层的语言与开发环境提供支持，将基础、切面和配置封装成面向方面中的逻辑模型。</p>
<h3 id="1-3-层次1-底层编织实现模块"><a href="#1-3-层次1-底层编织实现模块" class="headerlink" title="1.3 层次1:底层编织实现模块"></a>1.3 层次1:底层编织实现模块</h3><p>将编织逻辑进行实现的技术。<br>前文所述的两种动态代理技术就是在这个层面进行应用。</p>
<h2 id="2-Spring-AOP实现"><a href="#2-Spring-AOP实现" class="headerlink" title="2 Spring AOP实现"></a>2 Spring AOP实现</h2><p>我们从上到下的看看Spring如何实现AOP的。整个AOP框架逻辑流程很复杂，这里就只对在目标对象在单例模式下并使用JDK动态代理的AOP进行分析。</p>
<h3 id="2-1-层次3-语言和开发环境"><a href="#2-1-层次3-语言和开发环境" class="headerlink" title="2.1 层次3:语言和开发环境"></a>2.1 层次3:语言和开发环境</h3><h4 id="2-1-1-基础"><a href="#2-1-1-基础" class="headerlink" title="2.1.1 基础"></a>2.1.1 基础</h4><p>在Spring中，基础就是你配置的Bean对象，这个Bean对象可以配置在XML中，也可以使用注解进行配置,如<code>&lt;bean id=&quot;realSubject&quot; class=&quot;com.magicalwolf.proxy.RealSubject&quot; /&gt;</code></p>
<h4 id="2-1-2-切面"><a href="#2-1-2-切面" class="headerlink" title="2.1.2 切面"></a>2.1.2 切面</h4><p>在Spring中，切面由切点和通知组成，由使用者进行定义.</p>
<h5 id="PointCut切点"><a href="#PointCut切点" class="headerlink" title="PointCut切点"></a>PointCut切点</h5><p>决定Advice通知应该作用于哪个连接点，也就是通过切点定义哪些方法需要增强。  </p>
<p><code>PointCut</code>接口是所有切点实现的基本接口，其中定义了<code>MethodMatcher</code>方法，用来判断当前方法是否需要增强。可以通过不同的方式进行判断，如<code>JdkRegexpMethodPointcut</code>类使用正则表达式进行匹配，还可以使用类限定名，切点表达式等方式进行匹配。</p>
<h5 id="Advice通知"><a href="#Advice通知" class="headerlink" title="Advice通知"></a>Advice通知</h5><p>通知定义在连接点做什么，为切面增强提供织入接口。<code>Advice</code>接口是AOP联盟定义的统一接口，Spring对这个接口进行了细化和扩展，如<code>BeforeAdvice</code>,<code>AfterAdvice</code>,<code>ThrowsAdvice</code></p>
<h5 id="Advisor通知器"><a href="#Advisor通知器" class="headerlink" title="Advisor通知器"></a>Advisor通知器</h5><p>通知器将通知和切点结合起来，为Spring配置AOP容器提供便利。</p>
<h4 id="2-1-3-配置"><a href="#2-1-3-配置" class="headerlink" title="2.1.3 配置"></a>2.1.3 配置</h4><p>对基础和切面进行配置，使之对基础进行增强.Spring实现多种方式的配置，<code>ProxyFactoryBean</code>完成声明式配置，<code>ProxyFactory</code>完成编程式配置。<code>AspectJProxyFactory</code>将Spring和Aspectj集成。</p>
<h4 id="2-1-4-使用ProxyFactoryBean的示例"><a href="#2-1-4-使用ProxyFactoryBean的示例" class="headerlink" title="2.1.4 使用ProxyFactoryBean的示例"></a>2.1.4 使用ProxyFactoryBean的示例</h4><p>applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/aop</div><div class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 目标对象 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"realSubject"</span> <span class="attr">class</span>=<span class="string">"com.magicalwolf.proxy.RealSubject"</span> /&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 通知 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"requestAdvice"</span> <span class="attr">class</span>=<span class="string">"com.magicalwolf.spring.aop.RequestBeforeAdvice"</span> /&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 通知器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"requestAdvisor"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.aop.support.NameMatchMethodPointcutAdvisor"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"requestAdvice"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappedName"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>request<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 代理工厂 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"requestAOP"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.magicalwolf.proxy.Subject"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"realSubject"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>requestAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>RequestBeforeAdvice.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(String param)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!param.equals(<span class="string">"magicalwolf"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span></span></div><div class="line">            <span class="keyword">throws</span> Throwable &#123;</div><div class="line">        before((String)args[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">        Subject proxy= (Subject) context.getBean(<span class="string">"requestAOP"</span>);</div><div class="line">        proxy.request(<span class="string">"magicalwolf"</span>);</div><div class="line">        proxy.request(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>层次3主要定义了开发人员如何使用AOP，Spring在背后将进行逻辑模型的封装工作</strong></p>
<h3 id="2-2-层次2-面向方面系统"><a href="#2-2-层次2-面向方面系统" class="headerlink" title="2.2 层次2:面向方面系统"></a>2.2 层次2:面向方面系统</h3><p>我们从ProxyFactoryBean出发，看看面向方面系统是如何对target目标起作用的。</p>
<h4 id="2-2-1-ProxyFactoryBean的继承关系"><a href="#2-2-1-ProxyFactoryBean的继承关系" class="headerlink" title="2.2.1 ProxyFactoryBean的继承关系"></a>2.2.1 ProxyFactoryBean的继承关系</h4><p><img src="http://qiniu.magicalwolf.com/ProxyFactoryBean-extend.png" alt=""></p>
<ul>
<li><code>ProxyFactoryBean</code>类负责具体AOP代理对象的生成</li>
<li><code>ProxyCreateSupport</code>类是创建AOP代理对象的一个辅助类</li>
<li><code>AdvisedSupport</code>类封装了对通知和通知器相关的操作</li>
<li><code>ProxyConfig</code>类为子类提供配置属性</li>
</ul>
<h4 id="2-2-2-生成代理对象跟踪"><a href="#2-2-2-生成代理对象跟踪" class="headerlink" title="2.2.2 生成代理对象跟踪"></a>2.2.2 生成代理对象跟踪</h4><p>从FactoryBean中获取对象，是以<code>getObject()</code>方法为入口，在ProxyFactoryBean也是如此，<code>getObject()</code>方法对目标对象进行增强处理。</p>
<h5 id="2-2-2-1-public-Object-getObject"><a href="#2-2-2-1-public-Object-getObject" class="headerlink" title="2.2.2.1 public Object getObject()"></a>2.2.2.1 public Object getObject()</h5><p>首先对通知器链进行初始化，生成代理对象时如果是单例模式调用getSingletonInstance(),此处只分析单例的情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">	initializeAdvisorChain();<span class="comment">//初始化通知器链(2.2.2.2)</span></div><div class="line">	<span class="keyword">if</span> (isSingleton()) &#123;</div><div class="line">		<span class="keyword">return</span> getSingletonInstance();<span class="comment">//生成Singleton的代理对象(2.2.2.3)</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.targetName == <span class="keyword">null</span>) &#123;</div><div class="line">			logger.warn(<span class="string">"Using non-singleton proxies with singleton targets is often undesirable. "</span> +</div><div class="line">					<span class="string">"Enable prototype proxies by setting the 'targetName' property."</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> newPrototypeInstance();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="2-2-2-2-private-synchronized-void-initializeAdvisorChain"><a href="#2-2-2-2-private-synchronized-void-initializeAdvisorChain" class="headerlink" title="2.2.2.2 private synchronized void initializeAdvisorChain()"></a>2.2.2.2 private synchronized void initializeAdvisorChain()</h5><p>初始化通知器链，此方法是线程安全的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initializeAdvisorChain</span><span class="params">()</span> <span class="keyword">throws</span> AopConfigException, BeansException </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.advisorChainInitialized) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">    /检查interceptorNames是否为空，interceptorNames是一个String[]</div><div class="line">	<span class="keyword">if</span> (!ObjectUtils.isEmpty(<span class="keyword">this</span>.interceptorNames)) &#123;</div><div class="line">        <span class="comment">//检查beanFactory是否为null，此处的beanFactory是Spring的Bean工厂,直接从容器中获得配置的通知器</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No BeanFactory available anymore (probably due to serialization) "</span> +</div><div class="line">					<span class="string">"- cannot resolve interceptor names "</span> + Arrays.asList(<span class="keyword">this</span>.interceptorNames));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Globals can't be last unless we specified a targetSource using the property...</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.interceptorNames[<span class="keyword">this</span>.interceptorNames.length - <span class="number">1</span>].endsWith(GLOBAL_SUFFIX) &amp;&amp;</div><div class="line">				<span class="keyword">this</span>.targetName == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.targetSource == EMPTY_TARGET_SOURCE) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Target required after globals"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 通过Bean Name获得通知器</span></div><div class="line">		<span class="keyword">for</span> (String name : <span class="keyword">this</span>.interceptorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">				logger.trace(<span class="string">"Configuring advisor or advice '"</span> + name + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">            <span class="comment">//GLOBAL_SUFFIX = "*"，说明这个通知器是全局通知器</span></div><div class="line">			<span class="keyword">if</span> (name.endsWith(GLOBAL_SUFFIX)) &#123;</div><div class="line">				<span class="keyword">if</span> (!(<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ListableBeanFactory)) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(</div><div class="line">							<span class="string">"Can only use global advisors or interceptors with a ListableBeanFactory"</span>);</div><div class="line">				&#125;</div><div class="line">				addGlobalAdvisor((ListableBeanFactory) <span class="keyword">this</span>.beanFactory,</div><div class="line">						name.substring(<span class="number">0</span>, name.length() - GLOBAL_SUFFIX.length()));</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// 添加一个命名的通知器，检查是singleton还是prototype</span></div><div class="line">				Object advice;</div><div class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.singleton || <span class="keyword">this</span>.beanFactory.isSingleton(name)) &#123;</div><div class="line">					<span class="comment">// 获得一个Advice或Advisor</span></div><div class="line">					advice = <span class="keyword">this</span>.beanFactory.getBean(name);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="comment">// It's a prototype Advice or Advisor: replace with a prototype.</span></div><div class="line">					<span class="comment">// Avoid unnecessary creation of prototype bean just for advisor chain initialization.</span></div><div class="line">					advice = <span class="keyword">new</span> PrototypePlaceholderAdvisor(name);</div><div class="line">				&#125;</div><div class="line">				addAdvisorOnChainCreation(advice, name);<span class="comment">//添加通知器到通知器列表(2.2.6)</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.advisorChainInitialized = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="2-2-2-3-private-synchronized-Object-getSingletonInstance"><a href="#2-2-2-3-private-synchronized-Object-getSingletonInstance" class="headerlink" title="2.2.2.3 private synchronized Object getSingletonInstance()"></a>2.2.2.3 private synchronized Object getSingletonInstance()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Object <span class="title">getSingletonInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//singletonInstance为缓存的单例对象，如果存在就直接返回</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.singletonInstance == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">this</span>.targetSource = freshTargetSource();<span class="comment">//targetSource在AdvisedSupport中定义，用来获得目标对象</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.autodetectInterfaces &amp;&amp; getProxiedInterfaces().length == <span class="number">0</span> &amp;&amp; !isProxyTargetClass()) &#123;</div><div class="line">			<span class="comment">//依靠AOP框架告诉我们哪个接口被代理</span></div><div class="line">			Class&lt;?&gt; targetClass = getTargetClass();</div><div class="line">			<span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> FactoryBeanNotInitializedException(<span class="string">"Cannot determine target class for proxy"</span>);</div><div class="line">			&#125;</div><div class="line">            <span class="comment">//设置代理接口，在AdvisedSupport中定义了interfaces列表</span></div><div class="line">			setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, <span class="keyword">this</span>.proxyClassLoader));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">super</span>.setFrozen(<span class="keyword">this</span>.freezeProxy);</div><div class="line">        <span class="comment">//使用ProxyFactory生成需要的Proxy</span></div><div class="line">		<span class="keyword">this</span>.singletonInstance = getProxy(createAopProxy());</div><div class="line">        <span class="comment">//getProxy（2.2.2.4），createAopProxy(2.2.2.5)</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.singletonInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-2-2-4-protected-Object-getProxy-AopProxy-aopProxy"><a href="#2-2-2-4-protected-Object-getProxy-AopProxy-aopProxy" class="headerlink" title="2.2.2.4 protected Object getProxy(AopProxy aopProxy)"></a>2.2.2.4 protected Object getProxy(AopProxy aopProxy)</h5><p><code>AopProxy</code>是一个接口，有两个子类实现，一个是<code>ObjenesisCglibAopProxy</code>,一个是<code>JdkDynamicProxy</code>.分别通过CGLIB和JDK来生成需要的Proxy代理对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getProxy</span><span class="params">(AopProxy aopProxy)</span> </span>&#123;</div><div class="line">    <span class="comment">//通过AopProxy得到代理对象</span></div><div class="line">	<span class="keyword">return</span> aopProxy.getProxy(<span class="keyword">this</span>.proxyClassLoader);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="2-2-2-5-protected-final-synchronized-AopProxy-createAopProxy"><a href="#2-2-2-5-protected-final-synchronized-AopProxy-createAopProxy" class="headerlink" title="2.2.2.5 protected final synchronized AopProxy createAopProxy()"></a>2.2.2.5 protected final synchronized AopProxy createAopProxy()</h5><p>此方法在<code>ProxyCreatorSupport</code>中定义，具体是通过<code>AopProxyFactory</code>来获得AopProxy，<code>AopProxyFactory</code>默认的工厂实现是<code>DefaultAopProxyFactory</code>，生成哪一种AopProxy就在此类中定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</div><div class="line">		activate();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>DefaultAopProxyFactory</code>中的createAopProxy方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</div><div class="line">	<span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</div><div class="line">		Class&lt;?&gt; targetClass = config.getTargetClass();</div><div class="line">        <span class="comment">//检查目标对象是否存在</span></div><div class="line">		<span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</div><div class="line">					<span class="string">"Either an interface or a target is required for proxy creation."</span>);</div><div class="line">		&#125;</div><div class="line">        <span class="comment">//如果是接口类使用JDK生成Proxy</span></div><div class="line">		<span class="keyword">if</span> (targetClass.isInterface()) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">		&#125;</div><div class="line">        <span class="comment">//否则用cglib</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>JdkDynamicAopProxy</code>中的getObject方法，这里我们可以看到熟悉的Proxy.newProxyInstance()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">		logger.debug(<span class="string">"Creating JDK dynamic proxy: target source is "</span> + <span class="keyword">this</span>.advised.getTargetSource());</div><div class="line">	&#125;</div><div class="line">	Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised);</div><div class="line">	findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</div><div class="line">	<span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="2-2-2-6-private-void-addAdvisorOnChainCreation-Object-next-String-name"><a href="#2-2-2-6-private-void-addAdvisorOnChainCreation-Object-next-String-name" class="headerlink" title="2.2.2.6 private void addAdvisorOnChainCreation(Object next, String name)"></a>2.2.2.6 private void addAdvisorOnChainCreation(Object next, String name)</h5><p><code>namedBeanToAdvisor</code>方法会将next对象包装为Advisor对象，并添加到Advisor集合中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAdvisorOnChainCreation</span><span class="params">(Object next, String name)</span> </span>&#123;</div><div class="line">	Advisor advisor = namedBeanToAdvisor(next);</div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Adding advisor with name '"</span> + name + <span class="string">"'"</span>);</div><div class="line">	&#125;</div><div class="line">	addAdvisor(advisor);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>namedBeanToAdvisor</code>方法中，会使用<code>DefaultAdvisorAdapterRegistry</code>的warp方法对next对象进行包装.通知器是由切点和通知组成，如果只配置了通知，则切点为默认的<code>TruePointcut</code>,它对任何方法的匹配都将返回true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Advisor <span class="title">wrap</span><span class="params">(Object adviceObject)</span> <span class="keyword">throws</span> UnknownAdviceTypeException </span>&#123;</div><div class="line">	<span class="comment">//如果对象已经是Advisor直接返回</span></div><div class="line">    <span class="keyword">if</span> (adviceObject <span class="keyword">instanceof</span> Advisor) &#123;</div><div class="line">		<span class="keyword">return</span> (Advisor) adviceObject;</div><div class="line">	&#125;</div><div class="line">    <span class="comment">//检查类型</span></div><div class="line">	<span class="keyword">if</span> (!(adviceObject <span class="keyword">instanceof</span> Advice)) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(adviceObject);</div><div class="line">	&#125;</div><div class="line">	Advice advice = (Advice) adviceObject;</div><div class="line">	<span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123;</div><div class="line">		<span class="comment">// 包装为默认切点通知器</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(advice);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (AdvisorAdapter adapter : <span class="keyword">this</span>.adapters) &#123;</div><div class="line">		<span class="comment">// 检查是否匹配</span></div><div class="line">		<span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(advice);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(advice);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过以上的分析，我们已经得到了代理对象，至此层次2的工作已经完成了，层次3获得的配置模型，在配置逻辑的应用下向AOP模型转换，接下来该层次1的实现了</p>
<h3 id="2-2-层次1-底层编织实现模块"><a href="#2-2-层次1-底层编织实现模块" class="headerlink" title="2.2 层次1:底层编织实现模块"></a>2.2 层次1:底层编织实现模块</h3><p>在生成代理对象的时候，相关的拦截器已经配置完成，拦截器起作用是通过对方法进行回掉完成的。</p>
<h4 id="2-2-1-使用JDK代理的实现"><a href="#2-2-1-使用JDK代理的实现" class="headerlink" title="2.2.1 使用JDK代理的实现"></a>2.2.1 使用JDK代理的实现</h4><p>前文提到过，在JDK代理中方法回掉的入口是在invoke方法中。而<code>JdkDynamicAopProxy</code>实现了<code>InvocationHandler</code>接口，方法回掉逻辑也定义在其中.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">	MethodInvocation invocation;</div><div class="line">	Object oldProxy = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;</div><div class="line">	Class&lt;?&gt; targetClass = <span class="keyword">null</span>;</div><div class="line">	Object target = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</div><div class="line">			<span class="comment">// 目标没有实现自己的equals方法</span></div><div class="line">			<span class="keyword">return</span> equals(args[<span class="number">0</span>]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</div><div class="line">			<span class="comment">// 目标没有实现自己的hashCodes方法</span></div><div class="line">			<span class="keyword">return</span> hashCode();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</div><div class="line">				method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</div><div class="line">			<span class="comment">// 根据代理对象的配置调用服务，如果是Advised接口的实现类，则直接调用</span></div><div class="line">			<span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised, method, args);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Object retVal;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</div><div class="line">			<span class="comment">// Make invocation available if necessary.</span></div><div class="line">			oldProxy = AopContext.setCurrentProxy(proxy);</div><div class="line">			setProxyContext = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 有可能为null.尽可能减少拥有目标对象的时间，在这种情况下对象来自于对象池</span></div><div class="line">		target = targetSource.getTarget();</div><div class="line">		<span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">			targetClass = target.getClass();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 获得这个方法的连接器链</span></div><div class="line">		List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);<span class="comment">//2.2.2</span></div><div class="line">        <span class="comment">//如果没有拦截器链，则直接调用目标对象</span></div><div class="line">		<span class="keyword">if</span> (chain.isEmpty()) &#123;</div><div class="line">			retVal = AopUtils.invokeJoinpointUsingReflection(target, method, args);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 构造一个方法调用</span></div><div class="line">			invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</div><div class="line">			<span class="comment">// 调用连接点的拦截器链(2.2.3)</span></div><div class="line">			retVal = invocation.proceed();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Class&lt;?&gt; returnType = method.getReturnType();</div><div class="line">		<span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</div><div class="line">				!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</div><div class="line">			retVal = proxy;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</div><div class="line">					<span class="string">"Null return value from advice does not match primitive return type for: "</span> + method);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> retVal;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</div><div class="line">			<span class="comment">// 必须来自TargetSource.</span></div><div class="line">			targetSource.releaseTarget(target);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (setProxyContext) &#123;</div><div class="line">			<span class="comment">// 重新保存旧的代理</span></div><div class="line">			AopContext.setCurrentProxy(oldProxy);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>invoke</code>方法获取目标对象和拦截器链，并生成<code>ReflectiveMethodInvocation</code>对象，通过这个对象完成对AOP功能的封装。</p>
<h4 id="2-2-2-获得方法的拦截器链"><a href="#2-2-2-获得方法的拦截器链" class="headerlink" title="2.2.2 获得方法的拦截器链"></a>2.2.2 获得方法的拦截器链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> </span>&#123;</div><div class="line">	MethodCacheKey cacheKey = <span class="keyword">new</span> MethodCacheKey(method);</div><div class="line">	List&lt;Object&gt; cached = <span class="keyword">this</span>.methodCache.get(cacheKey);<span class="comment">//</span></div><div class="line">	<span class="keyword">if</span> (cached == <span class="keyword">null</span>) &#123;</div><div class="line">		cached = <span class="keyword">this</span>.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(</div><div class="line">				<span class="keyword">this</span>, method, targetClass);</div><div class="line">		<span class="keyword">this</span>.methodCache.put(cacheKey, cached);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cached;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>methodCache是一个集合Map<methodcachekey, list<object="">&gt;,对方法的拦截器链进行缓存，如果不在缓存中，则生成并添加。这里使用<code>DefaultAdvisorChainFactory</code>来生成拦截器链<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(</span></span></div><div class="line">		Advised config, Method method, Class&lt;?&gt; targetClass) &#123;</div><div class="line"></div><div class="line">    <span class="comment">//通过config获得配置好的advisor链，AdvisedSupport实现了Advised</span></div><div class="line">	List&lt;Object&gt; interceptorList = <span class="keyword">new</span> ArrayList&lt;Object&gt;(config.getAdvisors().length);</div><div class="line">    <span class="comment">//实际对象</span></div><div class="line">	Class&lt;?&gt; actualClass = (targetClass != <span class="keyword">null</span> ? targetClass : method.getDeclaringClass());</div><div class="line">    <span class="comment">//判断是否符合配置要求</span></div><div class="line">	<span class="keyword">boolean</span> hasIntroductions = hasMatchingIntroductions(config, actualClass);</div><div class="line">	AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (Advisor advisor : config.getAdvisors()) &#123;</div><div class="line">		<span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</div><div class="line">			PointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;</div><div class="line">            <span class="comment">//判断通知器是否匹配实际对象</span></div><div class="line">			<span class="keyword">if</span> (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123;</div><div class="line">				MethodInterceptor[] interceptors = registry.getInterceptors(advisor);<span class="comment">//将通知器适配成方法拦截</span></div><div class="line">				MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();</div><div class="line">				<span class="keyword">if</span> (MethodMatchers.matches(mm, method, actualClass, hasIntroductions)) &#123;</div><div class="line">					<span class="keyword">if</span> (mm.isRuntime()) &#123;</div><div class="line">						<span class="keyword">for</span> (MethodInterceptor interceptor : interceptors) &#123;</div><div class="line">                            <span class="comment">//封装成动态方法匹配</span></div><div class="line">							interceptorList.add(<span class="keyword">new</span> InterceptorAndDynamicMethodMatcher(interceptor, mm));</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						interceptorList.addAll(Arrays.asList(interceptors));<span class="comment">//将拦截器链添加到列表中</span></div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</div><div class="line">			IntroductionAdvisor ia = (IntroductionAdvisor) advisor;</div><div class="line">			<span class="keyword">if</span> (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</div><div class="line">				Interceptor[] interceptors = registry.getInterceptors(advisor);</div><div class="line">				interceptorList.addAll(Arrays.asList(interceptors));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			Interceptor[] interceptors = registry.getInterceptors(advisor);</div><div class="line">			interceptorList.addAll(Arrays.asList(interceptors));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> interceptorList;</div><div class="line">&#125;</div></pre></td></tr></table></figure></methodcachekey,></p>
<p>此方法有一个适配和注册的过程，它将Advice通知适配成Spring预先设计好的拦截器。适配和注册的工作是在<code>GlobalAdvisorAdapterRegistry</code>的getInterceptors()中完成的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> MethodInterceptor[] getInterceptors(Advisor advisor) <span class="keyword">throws</span> UnknownAdviceTypeException &#123;</div><div class="line">	List&lt;MethodInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;MethodInterceptor&gt;(<span class="number">3</span>);</div><div class="line">	Advice advice = advisor.getAdvice();<span class="comment">//获得通知</span></div><div class="line">	<span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123;<span class="comment">//如果是MethodInterceptor则直接添加</span></div><div class="line">		interceptors.add((MethodInterceptor) advice);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (AdvisorAdapter adapter : <span class="keyword">this</span>.adapters) &#123;<span class="comment">//遍历注册的适配器，检查是否匹配</span></div><div class="line">		<span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</div><div class="line">			interceptors.add(adapter.getInterceptor(advisor));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (interceptors.isEmpty()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(advisor.getAdvice());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> interceptors.toArray(<span class="keyword">new</span> MethodInterceptor[interceptors.size()]);</div><div class="line">&#125;</div><div class="line">在`GlobalAdvisorAdapterRegistry`的构造函数中注册了三种适配器，注册过程就是将这三种适配器加入List集合</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultAdvisorAdapterRegistry</span><span class="params">()</span> </span>&#123;</div><div class="line">	registerAdvisorAdapter(<span class="keyword">new</span> MethodBeforeAdviceAdapter());</div><div class="line">	registerAdvisorAdapter(<span class="keyword">new</span> AfterReturningAdviceAdapter());</div><div class="line">	registerAdvisorAdapter(<span class="keyword">new</span> ThrowsAdviceAdapter());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>来看一下<code>MethodBeforeAdviceAdapter</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceAdapter</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapter</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsAdvice</span><span class="params">(Advice advice)</span> </span>&#123;<span class="comment">//是否支持</span></div><div class="line">		<span class="keyword">return</span> (advice <span class="keyword">instanceof</span> MethodBeforeAdvice);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> MethodInterceptor <span class="title">getInterceptor</span><span class="params">(Advisor advisor)</span> </span>&#123;<span class="comment">//将Advice适配成Interceptor</span></div><div class="line">		MethodBeforeAdvice advice = (MethodBeforeAdvice) advisor.getAdvice();</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MethodBeforeAdviceInterceptor(advice);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将Advice封装成了<code>MethodBeforeAdviceInterceptor</code>,此类中有invoke方法，会先调用advice的before方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">	<span class="keyword">this</span>.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() );</div><div class="line">	<span class="keyword">return</span> mi.proceed();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，Spring AOP实现了对advice的织入，可以看到它将xml中配置的通知器适配成了拦截器</p>
<h4 id="2-2-3-方法调用"><a href="#2-2-3-方法调用" class="headerlink" title="2.2.3 方法调用"></a>2.2.3 方法调用</h4><p>之前讲到了拦截器的适配和注册，对呀没有拦截器的方法直接调用，有拦截器的方法会构造<code>ReflectiveMethodInvocation</code>，并沿着拦截器链进行调用。整个调用链的入口在<code>proceed</code>方法中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">	<span class="comment">//从索引为-1的拦截器开始，并递增</span></div><div class="line">    <span class="comment">//如果拦截器迭代调用完成，则调用目标方法</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> invokeJoinpoint();<span class="comment">//使用invokeJoinpointUsingReflection调用目标对象</span></div><div class="line">	&#125;</div><div class="line">    <span class="comment">//沿着拦截器链执行</span></div><div class="line">	Object interceptorOrInterceptionAdvice =</div><div class="line">			<span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="keyword">this</span>.currentInterceptorIndex);</div><div class="line">	<span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</div><div class="line">		<span class="comment">//对方法进行动态匹配，切点的匹配就在这里进行</span></div><div class="line">		InterceptorAndDynamicMethodMatcher dm =</div><div class="line">				(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</div><div class="line">		<span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, <span class="keyword">this</span>.targetClass, <span class="keyword">this</span>.arguments)) &#123;</div><div class="line">			<span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 动态匹配失败</span></div><div class="line">			<span class="comment">// 跳过这个拦截器调用下一个</span></div><div class="line">			<span class="keyword">return</span> proceed();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// 这是一个拦截器，直接调用它</span></div><div class="line">		<span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，完成对拦截器链及目标方法的调用</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><h3 id="3-1-层次3-语言与开发环境"><a href="#3-1-层次3-语言与开发环境" class="headerlink" title="3.1 层次3:语言与开发环境"></a>3.1 层次3:语言与开发环境</h3><p>Spring AOP使用Java语言，可以通过多种方式进行AOP配置，<code>基础</code>就是Bean对象，<code>切面</code>可以通过xml或注解进行声明.<code>配置</code>是由IoC容器完成的</p>
<h3 id="3-2-层次2-面向方面系统"><a href="#3-2-层次2-面向方面系统" class="headerlink" title="3.2 层次2:面向方面系统"></a>3.2 层次2:面向方面系统</h3><p>本文分析使用<code>ProxyFactoryBean</code>的情况,<code>ProxyFactoryBean</code>处理配置逻辑，生成代理对象。<code>ProxyFactoryBean</code>会先初始化通知器集合，再根据代理类型使用<code>JdkDynamicProxy</code>或<code>ObjenesisCglibAopProxy</code>生成代理对象</p>
<h3 id="3-1-层次1-底层编织实现模块"><a href="#3-1-层次1-底层编织实现模块" class="headerlink" title="3.1 层次1:底层编织实现模块"></a>3.1 层次1:底层编织实现模块</h3><p>使用JDK代理时，方法的回掉入口在<code>invoke</code>方法中，在<code>invoke</code>方法中实现了Advice的织入，以及目标方法的调用。 </p>
<ul>
<li>Advice的织入:Spring预先设计好了拦截器，如<code>MethodBeforeAdviceInterceptor</code>,<code>AfterReturningAdviceInterceptor</code>,<code>ThrowsAdviceInterceptor</code>,将Advice适配成对应的拦截器，并将拦截器链缓存,此时完成了对Advice的织入  </li>
<li>目标方法的调用:如果在目标方法未配置拦截器，则直接调用目标方法，如果得到了拦截器链，则沿着拦截器链执行。在执行过程中如果是动态匹配的拦截器，则需要再次进行匹配，否则直接调用拦截器。</li>
</ul>
<p>以上分析了Spring AOP的部分实现，不过整个AOP基本流程已经分析完成。有了基础再去看AOP的高级部分会更加容易</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前文介绍了代理模式及实现，但想要实现一个完整的AOP框架还远远不够，接下来我们来分析一下Spring是如何实现AOP的。&lt;/p&gt;
&lt;h2 id=&quot;1-AOP体系结构&quot;&gt;&lt;a href=&quot;#1-AOP体系结构&quot; class=&quot;headerlink&quot; title=&quot;1 AOP体系结构&quot;&gt;&lt;/a&gt;1 AOP体系结构&lt;/h2&gt;&lt;p&gt;下图AOP联盟定义的AOP体系结构，大致分为从使用到实现的三个层次。整篇文章都将按照这三个层次进行分析&lt;br&gt;&lt;img src=&quot;http://qiniu.magicalwolf.com/aop-system.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="源码分析" scheme="http://magicwolf.xyz/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Spring" scheme="http://magicwolf.xyz/tags/Spring/"/>
    
      <category term="AOP" scheme="http://magicwolf.xyz/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP浅析(一) 代理模式及实现</title>
    <link href="http://magicwolf.xyz/2016/spring-aop-one/"/>
    <id>http://magicwolf.xyz/2016/spring-aop-one/</id>
    <published>2016-06-04T16:00:00.000Z</published>
    <updated>2016-12-28T13:03:23.636Z</updated>
    
    <content type="html"><![CDATA[<p>Spring AOP 是代理模式的应用，可以使用JDK提供的Proxy类或通过字节码增强来实现。想要知道Spring如何实现AOP就必须要先了解代理模式。</p>
<h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1 代理模式"></a>1 代理模式</h2><blockquote>
<p>代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问;<br>使用代理模式创建代理对西安，让代理对象控制某对象的访问，被代理的对象可以是远程对象，创建开销大的对象或需要安全控制的对象  </p>
<p>–《Head First 设计模式》</p>
</blockquote>
<a id="more"></a>
<h3 id="1-1-UML类图"><a href="#1-1-UML类图" class="headerlink" title="1.1 UML类图"></a>1.1 UML类图</h3><p><img src="http://qiniu.magicalwolf.com/proxy-uml.png" alt=""></p>
<h2 id="2-代理模式实现"><a href="#2-代理模式实现" class="headerlink" title="2 代理模式实现"></a>2 代理模式实现</h2><p>参照上面的UML类图，先写出Subject接口和实际对象  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//抽象角色</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(String param)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//目标角色</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(String param)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"param:"</span>+param);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-1-静态代理"><a href="#2-1-静态代理" class="headerlink" title="2.1 静态代理"></a>2.1 静态代理</h3><p>静态代理的实现很简单，对目标角色进行封装，并拦截方法调用。这里实现一个参数验证的代理逻辑<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    Subject  realSubject;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticProxy</span><span class="params">(Subject  realSubject)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.realSubject=realSubject;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(String param)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!param.equals(<span class="string">"magicalwolf"</span>))<span class="comment">//验证参数</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(String param)</span> </span>&#123;</div><div class="line">        before(param);</div><div class="line">        realSubject.request(param);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Subject target=<span class="keyword">new</span> RealSubject();</div><div class="line">        Subject proxy=<span class="keyword">new</span> StaticProxy(target);</div><div class="line">        proxy.request(<span class="string">"magicalwolf"</span>);</div><div class="line">        proxy.request(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出:param:magicalwolf</div><div class="line">    Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException</div><div class="line">    ......</div></pre></td></tr></table></figure></p>
<p>静态代理的实现为每个实际对象都产生一个代理类，并将其作为内部属性。这会导致类数量的急速增加，并且代理类的代码存在大量重复。这就需要动态代理来实现。</p>
<h3 id="2-2-动态代理"><a href="#2-2-动态代理" class="headerlink" title="2.2 动态代理"></a>2.2 动态代理</h3><h4 id="2-2-1-通过JDK实现"><a href="#2-2-1-通过JDK实现" class="headerlink" title="2.2.1 通过JDK实现"></a>2.2.1 通过JDK实现</h4><p>JDK提供的动态代理需要实现<code>InvocationHandler</code>接口的<code>invoke</code>方法.此方法为整个代理的入口。方法签名为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span></div></pre></td></tr></table></figure></p>
<p>第一个参数是代理对象，第二个参数是目标方法，第三个参数是目标方法参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line">    Object target;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target=target;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(String param)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!param.equals(<span class="string">"magicalwolf"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">            <span class="keyword">throws</span> Throwable &#123;</div><div class="line">        before((String)args[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> method.invoke(target, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后通过<code>Proxy</code>类的<code>newProxyInstance</code>方法创建代理对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException</span></div></pre></td></tr></table></figure></p>
<p>第一个参数是目标对象的类加载器，第二个参数是目标类实现的接口，第三个参数是处理器<code>InvocationHandler</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Subject target=<span class="keyword">new</span> RealSubject();</div><div class="line">        Subject proxy=(Subject)Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">new</span> ProxyHandler(target));</div><div class="line">        proxy.request(<span class="string">"magicalwolf"</span>);</div><div class="line">        proxy.request(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">输出:与静态代理一样</div></pre></td></tr></table></figure></p>
<p>可以看到使用JDK提供的动态代理无需为每个对象都实现一个代理类，通过处理器，可以对不同的对象生成代理类。  </p>
<p>处理器只关注处理逻辑，并且可以重用，上面的例子中处理器用于参数检查，与某种格式的请求方法耦合在一起，如果需要对不同的方法进行，需要写多个处理器，但是还是比静态代理方便很多。  </p>
<p>对于更通用的功能，比如日志记录，调用次数统计，一个处理器就可以代理所有的对象。   </p>
<p><strong>注:但是JDK的动态代理是通过代理接口实现的，如果对象没有实现接口，那就无能为力了</strong></p>
<h4 id="2-2-2-通过字节码增强实现-CGLIB"><a href="#2-2-2-通过字节码增强实现-CGLIB" class="headerlink" title="2.2.2 通过字节码增强实现(CGLIB)"></a>2.2.2 通过字节码增强实现(CGLIB)</h4><p>CGLIB是一个强大的高性能的代码生成包,在运行时动态生成字节码并生成新类。</p>
<p>CGLIB提供了<code>MethodInterceptor</code>接口，当调用目标方法时被回调，类似于<code>InvocationHandler</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(String param)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!param.equals(<span class="string">"magicalwolf"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args,</span></span></div><div class="line">            MethodProxy proxy) <span class="keyword">throws</span> Throwable &#123;</div><div class="line">        before((String)args[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> proxy.invokeSuper(obj, args);<span class="comment">//调用父类的方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生成代理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer(); <span class="comment">//字节码增强器</span></div><div class="line">        enhancer.setSuperclass(RealSubject.class);  <span class="comment">//代理类</span></div><div class="line">        enhancer.setCallback(<span class="keyword">new</span> RequestInterceptor());<span class="comment">//回掉方法  </span></div><div class="line">        Subject proxy=(Subject) enhancer.create();</div><div class="line">        proxy.request(<span class="string">"magicalwolf"</span>);</div><div class="line">        proxy.request(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，CGLIB是通过动态生成目标类的子类，在子类中设置拦截逻辑，来进行动态代理。因此目标类的方法不能被final修饰。</p>
<h2 id="2-3-代理模式与装饰者模式"><a href="#2-3-代理模式与装饰者模式" class="headerlink" title="2.3 代理模式与装饰者模式"></a>2.3 代理模式与装饰者模式</h2><p>从UML上看装饰者模式和代理模式很像，装饰者和代理者都对目标方法进行修改，但是二者还是有很大的区别。  </p>
<ul>
<li>装饰者模式关注于对目标方法进行增强。装饰者只能在外加一层装饰。  </li>
<li>代理模式关注于对目标方法的控制。代理者拥有控制权限，可以决定目标方法是否调用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring AOP 是代理模式的应用，可以使用JDK提供的Proxy类或通过字节码增强来实现。想要知道Spring如何实现AOP就必须要先了解代理模式。&lt;/p&gt;
&lt;h2 id=&quot;1-代理模式&quot;&gt;&lt;a href=&quot;#1-代理模式&quot; class=&quot;headerlink&quot; title=&quot;1 代理模式&quot;&gt;&lt;/a&gt;1 代理模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问;&lt;br&gt;使用代理模式创建代理对西安，让代理对象控制某对象的访问，被代理的对象可以是远程对象，创建开销大的对象或需要安全控制的对象  &lt;/p&gt;
&lt;p&gt;–《Head First 设计模式》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="源码分析" scheme="http://magicwolf.xyz/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Spring" scheme="http://magicwolf.xyz/tags/Spring/"/>
    
      <category term="AOP" scheme="http://magicwolf.xyz/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat源码分析(一) HTTP协议解析</title>
    <link href="http://magicwolf.xyz/2016/tomcat-src-one/"/>
    <id>http://magicwolf.xyz/2016/tomcat-src-one/</id>
    <published>2016-05-23T16:00:00.000Z</published>
    <updated>2016-12-28T13:10:24.075Z</updated>
    
    <content type="html"><![CDATA[<p>前几天面试阿里，面试官问我如何解析HTTP协议，我大概说了一下的思路，他最后得出的结论是我对HTTP协议不了解，让我很受打击。回来看《深入剖析Tomcat》，研究一下Tomcat是如何解析HTTP协议的</p>
<h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><ul>
<li>《深入剖析Tomcat》是基于<code>tomcat-4.1.12</code>进行分析，这个版本在2002年发布,可以说是老古董了。不过就学习而言还是很好的工具.</li>
<li>Http协议的解析在连接器(connector) 中进行，连接器是一个独立的模块，可以被插入到容器中，<code>tomcat-4.1.12</code>里提供了默认连接器，但已被标注为过时。</li>
</ul>
<a id="more"></a>
<h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h2><h3 id="2-1-连接器"><a href="#2-1-连接器" class="headerlink" title="2.1 连接器"></a>2.1 连接器</h3><p>默认连接器在<code>org.apache.catalina.connector.http</code>包下,它实现了<code>Connector</code>接口和<code>Runnable</code>接口。分析的入口在<code>run</code>方法中</p>
<h4 id="2-1-1-run"><a href="#2-1-1-run" class="headerlink" title="2.1.1 run()"></a>2.1.1 run()</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">public void run() &#123;</div><div class="line">    while (!stopped) &#123;</div><div class="line">        //从ServerSocket中接受下一个进入的连接</div><div class="line">        Socket socket = null;</div><div class="line">        try &#123;</div><div class="line">            serverSocket.accept()");</div><div class="line">            socket = serverSocket.accept();</div><div class="line">            if (connectionTimeout &gt; 0)</div><div class="line">                socket.setSoTimeout(connectionTimeout);</div><div class="line">            socket.setTcpNoDelay(tcpNoDelay);//这个有点意思，关闭TCP延迟确认</div><div class="line">        &#125; catch (AccessControlException ace) &#123;</div><div class="line">            log("socket accept security exception", ace);</div><div class="line">            continue;</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            try &#123;</div><div class="line">                // 如果重新打开失败，退出</div><div class="line">                synchronized (threadSync) &#123;</div><div class="line">                    if (started &amp;&amp; !stopped)</div><div class="line">                        log("accept error: ", e);</div><div class="line">                    if (!stopped) &#123;</div><div class="line">                        serverSocket.close();</div><div class="line">                        serverSocket = open();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; catch (IOException ioe) &#123;</div><div class="line">                log("socket reopen, io problem: ", ioe);</div><div class="line">                break;</div><div class="line">            &#125; catch (KeyStoreException kse) &#123;</div><div class="line">                log("socket reopen, keystore problem: ", kse);</div><div class="line">                break;</div><div class="line">            &#125; catch (NoSuchAlgorithmException nsae) &#123;</div><div class="line">                log("socket reopen, keystore algorithm problem: ", nsae);</div><div class="line">                break;</div><div class="line">            &#125; catch (CertificateException ce) &#123;</div><div class="line">                log("socket reopen, certificate problem: ", ce);</div><div class="line">                break;</div><div class="line">            &#125; catch (UnrecoverableKeyException uke) &#123;</div><div class="line">                log("socket reopen, unrecoverable key: ", uke);</div><div class="line">                break;</div><div class="line">            &#125; catch (KeyManagementException kme) &#123;</div><div class="line">                log("socket reopen, key management problem: ", kme);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        // 把socket给适当的处理器</div><div class="line">        HttpProcessor processor = createProcessor();//2.1.2</div><div class="line">        if (processor == null) &#123;</div><div class="line">            try &#123;</div><div class="line">                log(sm.getString("httpConnector.noProcessor"));</div><div class="line">                socket.close();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                ;</div><div class="line">            &#125;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        processor.assign(socket);//2.2.3</div><div class="line">        // The processor will recycle itself when it finishes</div><div class="line">    &#125;</div><div class="line">    synchronized (threadSync) &#123;</div><div class="line">        threadSync.notifyAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-1-2-createProcessor"><a href="#2-1-2-createProcessor" class="headerlink" title="2.1.2 createProcessor()"></a>2.1.2 createProcessor()</h4><p>具体的处理将在<code>HttpProcessor</code>中进行，一个连接器会创建多个处理器,连接器的数量通过<code>maxProcessors</code>和<code>minProcessors</code>进行控制。今天的重点在http协议的解析，创建<code>HttpProcessor</code>的一些细节就不说了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> HttpProcessor <span class="title">createProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (processors) &#123;</div><div class="line">        <span class="keyword">if</span> (processors.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ((HttpProcessor) processors.pop());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((maxProcessors &gt; <span class="number">0</span>) &amp;&amp; (curProcessors &lt; maxProcessors)) &#123;</div><div class="line">            <span class="keyword">return</span> (newProcessor());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (maxProcessors &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> (newProcessor());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> (<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-处理器"><a href="#2-2-处理器" class="headerlink" title="2.2 处理器"></a>2.2 处理器</h3><p><code>HttpProcessor</code>在独立的线程中对请求进行处理，连接器将请求分配给处理器(调用处理器的<code>assign()</code>方法)，处理器处理完成后将进行回收重复利用</p>
<h4 id="2-2-1-run"><a href="#2-2-1-run" class="headerlink" title="2.2.1 run()"></a>2.2.1 run()</h4><p><code>HttpProcessor</code>同样实现了<code>Runnable</code>接口，在后台一直运行(被设置为守护线程)，等待处理请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (!stopped) &#123;</div><div class="line">        <span class="comment">// 等待下一个socket</span></div><div class="line">        Socket socket = await();<span class="comment">//2.2.2</span></div><div class="line">        <span class="keyword">if</span> (socket == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="comment">// 处理请求</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            process(socket);<span class="comment">//2.2.4</span></div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            log(<span class="string">"process.invoke"</span>, t);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 完成此次请求</span></div><div class="line">        connector.recycle(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">synchronized</span> (threadSync) &#123;</div><div class="line">        threadSync.notifyAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-2-await"><a href="#2-2-2-await" class="headerlink" title="2.2.2 await()"></a>2.2.2 await()</h4><p><code>await()</code>监视<code>available</code>变量，如果没有新的请求，就进入阻塞状态，同时<code>run()</code>方法也会被阻塞<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Socket <span class="title">await</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Wait for the Connector to provide a new Socket</span></div><div class="line">    <span class="keyword">while</span> (!available) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            wait();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Notify the Connector that we have received this Socket</span></div><div class="line">    Socket socket = <span class="keyword">this</span>.socket;</div><div class="line">    available = <span class="keyword">false</span>;</div><div class="line">    notifyAll();</div><div class="line">    <span class="keyword">if</span> ((debug &gt;= <span class="number">1</span>) &amp;&amp; (socket != <span class="keyword">null</span>))</div><div class="line">        log(<span class="string">"  The incoming request has been awaited"</span>);</div><div class="line">    <span class="keyword">return</span> (socket);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-3-assign-Socket-socket"><a href="#2-2-3-assign-Socket-socket" class="headerlink" title="2.2.3 assign(Socket socket)"></a>2.2.3 assign(Socket socket)</h4><p>连接器调用<code>assign</code>方法分配请求，它会唤醒阻塞的线程.这实际上是一个生产者-，消费者模型，通过<code>available</code>变量，将请求从连接器传递到处理器。但这个实现并不优雅，并且效率也不高<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">    synchronized void assign(Socket socket) &#123;</div><div class="line">        // Wait for the Processor to get the previous Socket</div><div class="line">        while (available) &#123;</div><div class="line">            try &#123;</div><div class="line">                wait();</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // Store the newly available Socket and notify our thread</div><div class="line">        this.socket = socket;</div><div class="line">        available = true;</div><div class="line">        notifyAll();</div><div class="line">        if ((debug &gt;= 1) &amp;&amp; (socket != null))</div><div class="line">            log(" An incoming request is being assigned");</div><div class="line">    &#125;</div><div class="line">```  </div><div class="line">#### 2.2.4 process(Socket socket)</div><div class="line">`process(Socket socket)`方法对请求进行处理,此处省略了很多</div><div class="line">``` java</div><div class="line">    private void process(Socket socket) &#123;</div><div class="line">        boolean ok = true;</div><div class="line">        boolean finishResponse = true;</div><div class="line">        SocketInputStream input = null;</div><div class="line">        OutputStream output = null;</div><div class="line">        // 构造和初始化需要的对象</div><div class="line">        try &#123;</div><div class="line">            input = new SocketInputStream(socket.getInputStream(),</div><div class="line">                                          connector.getBufferSize());</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log("process.create", e);</div><div class="line">            ok = false;</div><div class="line">        &#125;</div><div class="line">        keepAlive = true;</div><div class="line">        while (!stopped &amp;&amp; ok &amp;&amp; keepAlive) &#123;</div><div class="line">            finishResponse = true;</div><div class="line">            try &#123;</div><div class="line">                //此处的request,response是循环利用的</div><div class="line">                request.setStream(input);</div><div class="line">                request.setResponse(response);</div><div class="line">                output = socket.getOutputStream();</div><div class="line">                response.setStream(output);</div><div class="line">                response.setRequest(request);</div><div class="line">                ((HttpServletResponse) response.getResponse()).setHeader</div><div class="line">                    ("Server", SERVER_INFO);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                //...</div><div class="line">            &#125;</div><div class="line">            // 解析请求</div><div class="line">            try &#123;</div><div class="line">                if (ok) &#123;</div><div class="line">                    parseConnection(socket);//2.2.5</div><div class="line">                    parseRequest(input, output);//2.2.6</div><div class="line">                    if (!request.getRequest().getProtocol().startsWith("HTTP/0"))</div><div class="line">                        parseHeaders(input);//2.2.8</div><div class="line">                    if (http11) &#123;</div><div class="line">                        // 若在请求头中发现"EXpect:100-continue",则设置sendAck为true</div><div class="line">                        //ackRequest方法检查sendAck的值和是否允许分块，如果为true向客户端发送HTTP/1.1 100 Continue\r\n\r\n</div><div class="line">                        ackRequest(output);</div><div class="line">                        // If the protocol is HTTP/1.1, chunking is allowed.</div><div class="line">                        if (connector.isChunkingAllowed())</div><div class="line">                            response.setAllowChunking(true);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; catch (EOFException e) &#123;</div><div class="line">                //很可能client或server中的一方断开连接</div><div class="line">                ok = false;</div><div class="line">                finishResponse = false;</div><div class="line">            &#125; catch (ServletException e) &#123;</div><div class="line">                //...</div><div class="line">            &#125; catch (InterruptedIOException e) &#123;</div><div class="line">                //...</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                //...</div><div class="line">            &#125;</div><div class="line">            try &#123;</div><div class="line">                ((HttpServletResponse) response).setHeader("Date", FastHttpDateFormat.getCurrentDate());</div><div class="line">                if (ok) &#123;</div><div class="line">                    connector.getContainer().invoke(request, response);//如果处理正常调用容器的invoke方法</div><div class="line">                &#125;</div><div class="line">            &#125; catch (ServletException e) &#123;</div><div class="line">                //...</div><div class="line">            &#125; catch (InterruptedIOException e) &#123;</div><div class="line">                //...</div><div class="line">            &#125; catch (Throwable e) &#123;</div><div class="line">                //...</div><div class="line">            &#125;</div><div class="line">            // 完成处理请求</div><div class="line">            if (finishResponse) &#123;</div><div class="line">                //省略...</div><div class="line">                //主要是调用response.finishResponse();</div><div class="line">            &#125;</div><div class="line">            //必须检查Connection是否被设置为close或者在HTTP/1.0下</div><div class="line">            if ( "close".equals(response.getHeader("Connection")) ) &#123;</div><div class="line">                keepAlive = false;</div><div class="line">            &#125;</div><div class="line">            // 如果keepAlive为true并且解析没有发生错误，则继续while循环</div><div class="line">            status = Constants.PROCESSOR_IDLE;</div><div class="line">            // 回收request和response对象</div><div class="line">            request.recycle();</div><div class="line">            response.recycle();</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            shutdownInput(input);</div><div class="line">            socket.close();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            //...</div><div class="line">        &#125; catch (Throwable e) &#123;</div><div class="line">            //...</div><div class="line">        &#125;</div><div class="line">        socket = null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-5-parseConnection-Socket-socket"><a href="#2-2-5-parseConnection-Socket-socket" class="headerlink" title="2.2.5 parseConnection(Socket socket)"></a>2.2.5 parseConnection(Socket socket)</h4><p>解析连接信息，获取Internet地址，检查是否使用代理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConnection</span><span class="params">(Socket socket)</span></span></div><div class="line">    <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">    <span class="keyword">if</span> (debug &gt;= <span class="number">2</span>)</div><div class="line">        log(<span class="string">"  parseConnection: address="</span> + socket.getInetAddress() +</div><div class="line">            <span class="string">", port="</span> + connector.getPort());</div><div class="line">    ((HttpRequestImpl) request).setInet(socket.getInetAddress());</div><div class="line">    <span class="keyword">if</span> (proxyPort != <span class="number">0</span>)</div><div class="line">        request.setServerPort(proxyPort);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        request.setServerPort(serverPort);</div><div class="line">    request.setSocket(socket);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-6-parseRequest-SocketInputStream-input-OutputStream-output"><a href="#2-2-6-parseRequest-SocketInputStream-input-OutputStream-output" class="headerlink" title="2.2.6 parseRequest(SocketInputStream input, OutputStream output)"></a>2.2.6 parseRequest(SocketInputStream input, OutputStream output)</h4><p><code>requestLine</code>是一个<code>HttpRequest</code>实例，其中包含3个<code>char[]</code>,分别对应method,uri,protocol.调用<code>SocketInputStream</code>的<code>readRequestLine()</code>方法填充请求行，再获得对应的请求方法，URI,协议版本，(查询参数,session ID)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRequest</span><span class="params">(SocketInputStream input, OutputStream output)</span></span></div><div class="line">    <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">    <span class="comment">// 解析请求行</span></div><div class="line">    input.readRequestLine(requestLine);<span class="comment">//2.2.7</span></div><div class="line">    status = Constants.PROCESSOR_ACTIVE;</div><div class="line">    String method = <span class="keyword">new</span> String(requestLine.method, <span class="number">0</span>, requestLine.methodEnd);<span class="comment">//获得请求方法</span></div><div class="line">    String uri = <span class="keyword">null</span>;</div><div class="line">    String protocol = <span class="keyword">new</span> String(requestLine.protocol, <span class="number">0</span>, requestLine.protocolEnd);<span class="comment">//获得协议版本信息</span></div><div class="line">    <span class="keyword">if</span> (protocol.length() == <span class="number">0</span>)</div><div class="line">        protocol = <span class="string">"HTTP/0.9"</span>;</div><div class="line">    <span class="comment">// 如果是HTTP/1.1需要在解析请求后保持连接</span></div><div class="line">    <span class="keyword">if</span> ( protocol.equals(<span class="string">"HTTP/1.1"</span>) ) &#123;</div><div class="line">        http11 = <span class="keyword">true</span>;</div><div class="line">        sendAck = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        http11 = <span class="keyword">false</span>;</div><div class="line">        sendAck = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 对于HTTP/1.0, 默认不保持连接，除非指定Connection:Keep-Alive</span></div><div class="line">        keepAlive = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 验证请求行</span></div><div class="line">    <span class="keyword">if</span> (method.length() &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(sm.getString(<span class="string">"httpProcessor.parseRequest.method"</span>));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (requestLine.uriEnd &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(sm.getString(<span class="string">"httpProcessor.parseRequest.uri"</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 解析URI上的查询参数</span></div><div class="line">    <span class="keyword">int</span> question = requestLine.indexOf(<span class="string">"?"</span>);</div><div class="line">    <span class="keyword">if</span> (question &gt;= <span class="number">0</span>) &#123;</div><div class="line">        request.setQueryString(<span class="keyword">new</span> String(requestLine.uri, question + <span class="number">1</span>,requestLine.uriEnd - question - <span class="number">1</span>));<span class="comment">//设置查询参数</span></div><div class="line">        <span class="keyword">if</span> (debug &gt;= <span class="number">1</span>)</div><div class="line">            log(<span class="string">" Query string is "</span> +</div><div class="line">                ((HttpServletRequest) request.getRequest())</div><div class="line">                .getQueryString());</div><div class="line">        uri = <span class="keyword">new</span> String(requestLine.uri, <span class="number">0</span>, question);<span class="comment">//获得URI</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        request.setQueryString(<span class="keyword">null</span>);</div><div class="line">        uri = <span class="keyword">new</span> String(requestLine.uri, <span class="number">0</span>, requestLine.uriEnd);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Checking for an absolute URI (with the HTTP protocol)</span></div><div class="line">    <span class="comment">//检验绝对URI路径和HTTP协议</span></div><div class="line">    <span class="keyword">if</span> (!uri.startsWith(<span class="string">"/"</span>)) &#123;</div><div class="line">        <span class="keyword">int</span> pos = uri.indexOf(<span class="string">"://"</span>);</div><div class="line">        <span class="comment">// 解析协议和主机名</span></div><div class="line">        <span class="keyword">if</span> (pos != -<span class="number">1</span>) &#123;</div><div class="line">            pos = uri.indexOf(<span class="string">'/'</span>, pos + <span class="number">3</span>);</div><div class="line">            <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</div><div class="line">                uri = <span class="string">""</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                uri = uri.substring(pos);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 从请求URI解析session ID</span></div><div class="line">    <span class="keyword">int</span> semicolon = uri.indexOf(match);<span class="comment">//match=";jsessionid="0</span></div><div class="line">    <span class="keyword">if</span> (semicolon &gt;= <span class="number">0</span>) &#123;</div><div class="line">        String rest = uri.substring(semicolon + match.length());</div><div class="line">        <span class="keyword">int</span> semicolon2 = rest.indexOf(<span class="string">';'</span>);</div><div class="line">        <span class="keyword">if</span> (semicolon2 &gt;= <span class="number">0</span>) &#123;</div><div class="line">            request.setRequestedSessionId(rest.substring(<span class="number">0</span>, semicolon2));<span class="comment">//设置session ID</span></div><div class="line">            rest = rest.substring(semicolon2);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            request.setRequestedSessionId(rest);</div><div class="line">            rest = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        request.setRequestedSessionURL(<span class="keyword">true</span>);</div><div class="line">        uri = uri.substring(<span class="number">0</span>, semicolon) + rest;</div><div class="line">        <span class="keyword">if</span> (debug &gt;= <span class="number">1</span>)</div><div class="line">            log(<span class="string">" Requested URL session id is "</span> +</div><div class="line">                ((HttpServletRequest) request.getRequest())</div><div class="line">                .getRequestedSessionId());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        request.setRequestedSessionId(<span class="keyword">null</span>);</div><div class="line">        request.setRequestedSessionURL(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//修正RUI(使用字符串操作)</span></div><div class="line">    String normalizedUri = normalize(uri);</div><div class="line">    <span class="keyword">if</span> (debug &gt;= <span class="number">1</span>) log(<span class="string">"Normalized: '"</span> + uri + <span class="string">"' to '"</span> + normalizedUri + <span class="string">"'"</span>);</div><div class="line">    <span class="comment">// 设置请求属性</span></div><div class="line">    ((HttpRequest) request).setMethod(method);<span class="comment">//设置请求方法</span></div><div class="line">    request.setProtocol(protocol);<span class="comment">//设置协议版本</span></div><div class="line">    <span class="keyword">if</span> (normalizedUri != <span class="keyword">null</span>) &#123;</div><div class="line">        ((HttpRequest) request).setRequestURI(normalizedUri);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ((HttpRequest) request).setRequestURI(uri);</div><div class="line">    &#125;</div><div class="line">    request.setSecure(connector.getSecure());</div><div class="line">    request.setScheme(connector.getScheme());</div><div class="line">    <span class="keyword">if</span> (normalizedUri == <span class="keyword">null</span>) &#123;</div><div class="line">        log(<span class="string">" Invalid request URI: '"</span> + uri + <span class="string">"'"</span>);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Invalid URI: "</span> + uri + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (debug &gt;= <span class="number">1</span>)</div><div class="line">        log(<span class="string">" Request is '"</span> + method + <span class="string">"' for '"</span> + uri +</div><div class="line">            <span class="string">"' with protocol '"</span> + protocol + <span class="string">"'"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-7-readRequestLine-HttpRequestLine-requestLine"><a href="#2-2-7-readRequestLine-HttpRequestLine-requestLine" class="headerlink" title="2.2.7 readRequestLine(HttpRequestLine requestLine)"></a>2.2.7 readRequestLine(HttpRequestLine requestLine)</h4><p><code>readRequestLine</code>方法会分别填充请求行,URI,协议版本<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readRequestLine</span><span class="params">(HttpRequestLine requestLine)</span></span></div><div class="line">    <span class="keyword">throws</span> IOException &#123;</div><div class="line">    <span class="comment">// 检查是否已回收</span></div><div class="line">    <span class="keyword">if</span> (requestLine.methodEnd != <span class="number">0</span>)</div><div class="line">        requestLine.recycle();</div><div class="line">    <span class="comment">// 检查空白行</span></div><div class="line">    <span class="keyword">int</span> chr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">do</span> &#123; <span class="comment">// 跳过 CR(\r) 或 LF(\n)</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            chr = read();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            chr = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">while</span> ((chr == CR) || (chr == LF));</div><div class="line">    <span class="keyword">if</span> (chr == -<span class="number">1</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EOFException (sm.getString(<span class="string">"requestStream.readline.error"</span>));</div><div class="line">    pos--;</div><div class="line">    <span class="comment">// 读取方法名</span></div><div class="line">    <span class="keyword">int</span> maxRead = requestLine.method.length;<span class="comment">//这里的char[]数组的长度为8</span></div><div class="line">    <span class="keyword">int</span> readStart = pos;</div><div class="line">    <span class="keyword">int</span> readCount = <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> space = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//读取到空格说明方法名已解析完成</span></div><div class="line">    <span class="keyword">while</span> (!space) &#123;</div><div class="line">        <span class="comment">// 如果char[]已满，将容量翻倍</span></div><div class="line">        <span class="keyword">if</span> (readCount &gt;= maxRead) &#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="number">2</span> * maxRead) &lt;= HttpRequestLine.MAX_METHOD_SIZE) &#123;</div><div class="line">                <span class="keyword">char</span>[] newBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span> * maxRead];</div><div class="line">                System.arraycopy(requestLine.method, <span class="number">0</span>, newBuffer, <span class="number">0</span>,</div><div class="line">                                 maxRead);</div><div class="line">                requestLine.method = newBuffer;</div><div class="line">                maxRead = requestLine.method.length;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException</div><div class="line">                    (sm.getString(<span class="string">"requestStream.readline.toolong"</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 检查是否读取到末尾</span></div><div class="line">        <span class="keyword">if</span> (pos &gt;= count) &#123;</div><div class="line">            <span class="keyword">int</span> val = read();</div><div class="line">            <span class="keyword">if</span> (val == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException</div><div class="line">                    (sm.getString(<span class="string">"requestStream.readline.error"</span>));</div><div class="line">            &#125;</div><div class="line">            pos = <span class="number">0</span>;</div><div class="line">            readStart = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 检查是否读取到空格</span></div><div class="line">        <span class="keyword">if</span> (buf[pos] == SP) &#123;</div><div class="line">            space = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//填充char[] method</span></div><div class="line">        requestLine.method[readCount] = (<span class="keyword">char</span>) buf[pos];</div><div class="line">        readCount++;</div><div class="line">        pos++;</div><div class="line">    &#125;</div><div class="line">    requestLine.methodEnd = readCount - <span class="number">1</span>;<span class="comment">//设置请求方法结束位置</span></div><div class="line">    <span class="comment">// 解析URI</span></div><div class="line">    maxRead = requestLine.uri.length;</div><div class="line">    readStart = pos;</div><div class="line">    readCount = <span class="number">0</span>;</div><div class="line">    space = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> eol = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">while</span> (!space) &#123;</div><div class="line">        <span class="keyword">if</span> (readCount &gt;= maxRead) &#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="number">2</span> * maxRead) &lt;= HttpRequestLine.MAX_URI_SIZE) &#123;</div><div class="line">                <span class="keyword">char</span>[] newBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span> * maxRead];</div><div class="line">                System.arraycopy(requestLine.uri, <span class="number">0</span>, newBuffer, <span class="number">0</span>,</div><div class="line">                                 maxRead);</div><div class="line">                requestLine.uri = newBuffer;</div><div class="line">                maxRead = requestLine.uri.length;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(sm.getString(<span class="string">"requestStream.readline.toolong"</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 检查是否读取到末尾</span></div><div class="line">        <span class="keyword">if</span> (pos &gt;= count) &#123;</div><div class="line">            <span class="keyword">int</span> val = read();</div><div class="line">            <span class="keyword">if</span> (val == -<span class="number">1</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(sm.getString(<span class="string">"requestStream.readline.error"</span>));</div><div class="line">            pos = <span class="number">0</span>;</div><div class="line">            readStart = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 检查是否读取到空格</span></div><div class="line">        <span class="keyword">if</span> (buf[pos] == SP) &#123;</div><div class="line">            space = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((buf[pos] == CR) || (buf[pos] == LF)) &#123;</div><div class="line">            <span class="comment">// HTTP/0.9 风格的请求</span></div><div class="line">            eol = <span class="keyword">true</span>;</div><div class="line">            space = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//填充 char[] uri</span></div><div class="line">        requestLine.uri[readCount] = (<span class="keyword">char</span>) buf[pos];</div><div class="line">        readCount++;</div><div class="line">        pos++;</div><div class="line">    &#125;</div><div class="line">    requestLine.uriEnd = readCount - <span class="number">1</span>;<span class="comment">//设置uri结束位置</span></div><div class="line">    <span class="comment">// 解析协议</span></div><div class="line">    maxRead = requestLine.protocol.length;</div><div class="line">    readStart = pos;</div><div class="line">    readCount = <span class="number">0</span>;</div><div class="line">    <span class="comment">//是否结束</span></div><div class="line">    <span class="keyword">while</span> (!eol) &#123;</div><div class="line">        <span class="keyword">if</span> (readCount &gt;= maxRead) &#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="number">2</span> * maxRead) &lt;= HttpRequestLine.MAX_PROTOCOL_SIZE) &#123;</div><div class="line">                <span class="keyword">char</span>[] newBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span> * maxRead];</div><div class="line">                System.arraycopy(requestLine.protocol, <span class="number">0</span>, newBuffer, <span class="number">0</span>,</div><div class="line">                                 maxRead);</div><div class="line">                requestLine.protocol = newBuffer;</div><div class="line">                maxRead = requestLine.protocol.length;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(sm.getString(<span class="string">"requestStream.readline.toolong"</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         <span class="comment">// 检查是否读取到末尾</span></div><div class="line">        <span class="keyword">if</span> (pos &gt;= count) &#123;</div><div class="line">            <span class="keyword">int</span> val = read();</div><div class="line">            <span class="keyword">if</span> (val == -<span class="number">1</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(sm.getString(<span class="string">"requestStream.readline.error"</span>));</div><div class="line">            pos = <span class="number">0</span>;</div><div class="line">            readStart = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//是否结束</span></div><div class="line">        <span class="keyword">if</span> (buf[pos] == CR) &#123;</div><div class="line">            <span class="comment">// 跳过\r</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (buf[pos] == LF) &#123;</div><div class="line">            eol = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//填充char[] protocol</span></div><div class="line">            requestLine.protocol[readCount] = (<span class="keyword">char</span>) buf[pos];</div><div class="line">            readCount++;</div><div class="line">        &#125;</div><div class="line">        pos++;</div><div class="line">    &#125;</div><div class="line">    requestLine.protocolEnd = readCount;<span class="comment">//设置协议版本结束位置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-8-parseHeaders-SocketInputStream-input"><a href="#2-2-8-parseHeaders-SocketInputStream-input" class="headerlink" title="2.2.8 parseHeaders(SocketInputStream input)"></a>2.2.8 parseHeaders(SocketInputStream input)</h4><p>一个<code>HttpHeader</code>包含一个name数组和value数组,通过<code>SocketInputStream</code>中的<code>readHeader</code>方法填充<code>HttpHeader</code>对象，整个过程和<code>readRequestLine</code>类似.<br>通过<code>HttpHeader</code>对象，设置request对象对应的属性<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line">    private void parseHeaders(SocketInputStream input)</div><div class="line">        throws IOException, ServletException &#123;</div><div class="line">        while (true) &#123;</div><div class="line">            HttpHeader header = request.allocateHeader();//分配一个HttpHeader对象，从对象池中</div><div class="line">            // 解析请求头</div><div class="line">            input.readHeader(header);</div><div class="line">            if (header.nameEnd == 0) &#123;</div><div class="line">                if (header.valueEnd == 0) &#123;</div><div class="line">                    return;</div><div class="line">                &#125; else &#123;</div><div class="line">                    throw new ServletException</div><div class="line">                        (sm.getString("httpProcessor.parseHeaders.colon"));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            String value = new String(header.value, 0, header.valueEnd);//获得value值</div><div class="line">            if (debug &gt;= 1)</div><div class="line">                log(" Header " + new String(header.name, 0, header.nameEnd)+ " = " + value);</div><div class="line">            // 设置对应的请求头</div><div class="line">            if (header.equals(DefaultHeaders.AUTHORIZATION_NAME)) &#123;//authorization头</div><div class="line">                request.setAuthorization(value);</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.ACCEPT_LANGUAGE_NAME)) &#123;//accept-language头</div><div class="line">                parseAcceptLanguage(value);</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.COOKIE_NAME)) &#123;//cookie头</div><div class="line">                Cookie cookies[] = RequestUtil.parseCookieHeader(value);//将value解析成Cookie数组</div><div class="line">                for (int i = 0; i &lt; cookies.length; i++) &#123;</div><div class="line">                    if (cookies[i].getName().equals</div><div class="line">                        (Globals.SESSION_COOKIE_NAME)) &#123;//判断cookie名是否为JSESSIONID</div><div class="line">                        if (!request.isRequestedSessionIdFromCookie()) &#123;</div><div class="line">                            // 只接受第一个session ID</div><div class="line">                            request.setRequestedSessionId(cookies[i].getValue());//设置session ID</div><div class="line">                            request.setRequestedSessionCookie(true);</div><div class="line">                            request.setRequestedSessionURL(false);</div><div class="line">                            if (debug &gt;= 1)</div><div class="line">                                log(" Requested cookie session id is " +</div><div class="line">                                    ((HttpServletRequest) request.getRequest())</div><div class="line">                                    .getRequestedSessionId());</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    if (debug &gt;= 1)</div><div class="line">                        log(" Adding cookie " + cookies[i].getName() + "=" +</div><div class="line">                            cookies[i].getValue());</div><div class="line">                    request.addCookie(cookies[i]);//添加cookie到request对象</div><div class="line">                &#125;</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.CONTENT_LENGTH_NAME)) &#123;//content-length头</div><div class="line">                int n = -1;</div><div class="line">                try &#123;</div><div class="line">                    n = Integer.parseInt(value);</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    throw new ServletException</div><div class="line">                        (sm.getString("httpProcessor.parseHeaders.contentLength"));</div><div class="line">                &#125;</div><div class="line">                request.setContentLength(n);</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.CONTENT_TYPE_NAME)) &#123;//content-type头</div><div class="line">                request.setContentType(value);</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.HOST_NAME)) &#123;//host头</div><div class="line">                int n = value.indexOf(':');</div><div class="line">                if (n &lt; 0) &#123;</div><div class="line">                    if (connector.getScheme().equals("http")) &#123;</div><div class="line">                        request.setServerPort(80);//设置http协议端口</div><div class="line">                    &#125; else if (connector.getScheme().equals("https")) &#123;</div><div class="line">                        request.setServerPort(443);//设置https协议端口</div><div class="line">                    &#125;</div><div class="line">                    if (proxyName != null)</div><div class="line">                        request.setServerName(proxyName);</div><div class="line">                    else</div><div class="line">                        request.setServerName(value);</div><div class="line">                &#125; else &#123;</div><div class="line">                    if (proxyName != null)</div><div class="line">                        request.setServerName(proxyName);</div><div class="line">                    else</div><div class="line">                        request.setServerName(value.substring(0, n).trim());</div><div class="line">                    if (proxyPort != 0)</div><div class="line">                        request.setServerPort(proxyPort);</div><div class="line">                    else &#123;</div><div class="line">                        int port = 80;</div><div class="line">                        try &#123;</div><div class="line">                            port =Integer.parseInt(value.substring(n+1).trim());</div><div class="line">                        &#125; catch (Exception e) &#123;</div><div class="line">                            throw new ServletException</div><div class="line">                                (sm.getString("httpProcessor.parseHeaders.portNumber"));</div><div class="line">                        &#125;</div><div class="line">                        request.setServerPort(port);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.CONNECTION_NAME)) &#123;//connection头</div><div class="line">                if (header.valueEquals(DefaultHeaders.CONNECTION_CLOSE_VALUE)) &#123;//close值</div><div class="line">                    keepAlive = false;</div><div class="line">                    response.setHeader("Connection", "close");</div><div class="line">                &#125;</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.EXPECT_NAME)) &#123;//expect头</div><div class="line">                if (header.valueEquals(DefaultHeaders.EXPECT_100_VALUE))//100-continue值</div><div class="line">                    sendAck = true;</div><div class="line">                else</div><div class="line">                    throw new ServletException</div><div class="line">                        (sm.getString("httpProcessor.parseHeaders.unknownExpectation"));</div><div class="line">            &#125; else if (header.equals(DefaultHeaders.TRANSFER_ENCODING_NAME)) &#123;//transfer-encoding头</div><div class="line">                //request.setTransferEncoding(header);</div><div class="line">            &#125;</div><div class="line">            request.nextHeader();//读取下一个请求头</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">```   </div><div class="line">### 2.3 Request对象</div><div class="line">在调用`getParameter`,`getParameterMap`,`getParameterNames`,`getParameterValues`时会先调用`parseParameters`方法解析请求参数</div><div class="line"></div><div class="line">#### 2.3.1 parseParameters()</div><div class="line">`parseParameters`方法将解析结果放入`ParameterMap`对象中;`ParameterMap`基础自`HashMap`,添加了锁定属性，当被锁定时不允许修改</div><div class="line">``` java</div><div class="line">    protected void parseParameters() &#123;</div><div class="line">        if (parsed)//如果已解析直接返回</div><div class="line">            return;</div><div class="line">        ParameterMap results = parameters;//初始化ParameterMap对象</div><div class="line">        if (results == null)</div><div class="line">            results = new ParameterMap();</div><div class="line">        results.setLocked(false);//解除锁定</div><div class="line">        String encoding = getCharacterEncoding();//获得编码信息</div><div class="line">        if (encoding == null) encoding = "ISO-8859-1";//默认编码</div><div class="line">        // 解析查询字符串中的参数</div><div class="line">        String queryString = getQueryString();</div><div class="line">        try &#123;</div><div class="line">            RequestUtil.parseParameters(results, queryString, encoding);//解析查询字符串</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            ;</div><div class="line">        &#125;</div><div class="line">        // 从正文中的参数</div><div class="line">        String contentType = getContentType();</div><div class="line">        if (contentType == null)</div><div class="line">            contentType = "";</div><div class="line">        int semicolon = contentType.indexOf(';');</div><div class="line">        if (semicolon &gt;= 0) &#123;</div><div class="line">            contentType = contentType.substring(0, semicolon).trim();</div><div class="line">        &#125; else &#123;</div><div class="line">            contentType = contentType.trim();</div><div class="line">        &#125;</div><div class="line">        if ("POST".equals(getMethod()) &amp;&amp; (getContentLength() &gt; 0)&amp;&amp; (this.stream == null)</div><div class="line">            &amp;&amp; "application/x-www-form-urlencoded".equals(contentType)) &#123;</div><div class="line">            //判断条件:POST方法,content-length&gt;0,有ServletInputStream,content-type=application/x-www-form-urlencoded</div><div class="line">            try &#123;</div><div class="line">                int max = getContentLength();</div><div class="line">                int len = 0;</div><div class="line">                byte buf[] = new byte[getContentLength()];</div><div class="line">                ServletInputStream is = getInputStream();</div><div class="line">                while (len &lt; max) &#123;//读取数据</div><div class="line">                    int next = is.read(buf, len, max - len);</div><div class="line">                    if (next &lt; 0 ) &#123;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                    len += next;</div><div class="line">                &#125;</div><div class="line">                is.close();</div><div class="line">                if (len &lt; max) &#123;</div><div class="line">                    //FIX ME,当实际接收长度小于content-length声明的长度时</div><div class="line">                    //上面的代码中检查next=-1可以预防出现死循环</div><div class="line">                    //但是这个bug必须在mod_jk模块中</div><div class="line">                    //记录额外的信息用于debug mod_jk</div><div class="line">                    StringBuffer msg = new StringBuffer();</div><div class="line">                    msg.append("HttpRequestBase.parseParameters content length mismatch\n");</div><div class="line">                    msg.append("  URL: ");</div><div class="line">                    msg.append(getRequestURL());</div><div class="line">                    msg.append(" Content Length: ");</div><div class="line">                    msg.append(max);</div><div class="line">                    msg.append(" Read: ");</div><div class="line">                    msg.append(len);</div><div class="line">                    msg.append("\n  Bytes Read: ");</div><div class="line">                    if ( len &gt; 0 ) &#123;</div><div class="line">                        msg.append(new String(buf,0,len));</div><div class="line">                    &#125;</div><div class="line">                    log(msg.toString());</div><div class="line">                    throw new RuntimeException</div><div class="line">                        (sm.getString("httpRequestBase.contentLengthMismatch"));</div><div class="line">                &#125;</div><div class="line">                RequestUtil.parseParameters(results, buf, encoding);//解析参数</div><div class="line">            &#125; catch (UnsupportedEncodingException ue) &#123;</div><div class="line">                ;</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                throw new RuntimeException</div><div class="line">                        (sm.getString("httpRequestBase.contentReadFail") + </div><div class="line">                         e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        results.setLocked(true);</div><div class="line">        parsed = true;</div><div class="line">        parameters = results;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>至此整个HTTP协议的解析流程就完成了</p>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><ul>
<li>连接器负责接收请求,处理器负责解析请求,每个处理器拥有自己的Request和Response对象,这两个对象可以重复使用</li>
<li>处理器处理流程<ol>
<li>解析连接信息:设置Internet地址和代理信息</li>
<li>解析请求行:请求方法,URI,协议版本，查询参数(如果有),keep-alive属性,session ID(如果禁用了cookie),标准化URI地址</li>
<li>解析请求头:将请求头设置到对应的属性中,其中有几个重要的属性,cookie,content-length和content-type(在处理正文时会用到),conection(主要检查是否close值)</li>
<li>解析参数:先解析URI中的查询参数,再解析正文中的参数</li>
<li>调用容器的invoke方法</li>
</ol>
</li>
</ul>
<hr>
<p>PS:<br>看完Tomcat如何解析才发现自己对HTTP协议不了解,只考虑到了HTTP协议的格式,没有考虑到不同版本的区别,特殊请求头的处理,不同请求方法的处理,cookie的解析,session的处理。<br>随着HTTP协议的发展,解析的难度越来越大,要求也越来越高(高效+正确);以上的代码在Tomcat4中已经废弃，换了更高效的连接器.等有时间去看一下Tomcat8的源码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天面试阿里，面试官问我如何解析HTTP协议，我大概说了一下的思路，他最后得出的结论是我对HTTP协议不了解，让我很受打击。回来看《深入剖析Tomcat》，研究一下Tomcat是如何解析HTTP协议的&lt;/p&gt;
&lt;h2 id=&quot;1-环境说明&quot;&gt;&lt;a href=&quot;#1-环境说明&quot; class=&quot;headerlink&quot; title=&quot;1. 环境说明&quot;&gt;&lt;/a&gt;1. 环境说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;《深入剖析Tomcat》是基于&lt;code&gt;tomcat-4.1.12&lt;/code&gt;进行分析，这个版本在2002年发布,可以说是老古董了。不过就学习而言还是很好的工具.&lt;/li&gt;
&lt;li&gt;Http协议的解析在连接器(connector) 中进行，连接器是一个独立的模块，可以被插入到容器中，&lt;code&gt;tomcat-4.1.12&lt;/code&gt;里提供了默认连接器，但已被标注为过时。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="源码分析" scheme="http://magicwolf.xyz/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Tomcat" scheme="http://magicwolf.xyz/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="http://magicwolf.xyz/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC系列(三) 基于注解的权限控制</title>
    <link href="http://magicwolf.xyz/2016/spring-mvc-three/"/>
    <id>http://magicwolf.xyz/2016/spring-mvc-three/</id>
    <published>2016-05-09T16:00:00.000Z</published>
    <updated>2016-12-28T12:30:05.097Z</updated>
    
    <content type="html"><![CDATA[<p>在Java EE项目中，权限控制是经常遇到的问题。尤其是在多角色的系统中，权限控制的粒度更细，也更为重要。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>系统中有三种角色，教师，管理员，学生，角色权限部分交叉。如果将权限控制的逻辑添加到每一个接口，代码冗杂且不易扩展，维护。我们将权限控制部分单独分离出来，并使用非侵入式的方法为每一个接口添加权限。</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>注解:利用Java的注解机制，在运行时得到接口的权限信息。</li>
<li>AOP:Spring MVC提供了拦截器功能，本质上是AOP。通过拦截器在处理请求前统一检验权限，在不改变业务代码的基础上添加了权限控制。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="学生权限-StudentPermission"><a href="#学生权限-StudentPermission" class="headerlink" title="学生权限:StudentPermission"></a>学生权限:StudentPermission</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StudentPermission &#123;&#125;</div></pre></td></tr></table></figure>
<p>还定义了教师权限(TeacherPermission)、管理员权限(AdminPermission)、自身权限(SelfPermission)。这里只定义空注解，起标记作用。</p>
<h3 id="添加拦截器-PermissionsInterceptor"><a href="#添加拦截器-PermissionsInterceptor" class="headerlink" title="添加拦截器:PermissionsInterceptor"></a>添加拦截器:PermissionsInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionsInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</div><div class="line">        Method method = handlerMethod.getMethod();</div><div class="line">        <span class="keyword">boolean</span> isPass=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(TeacherPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isTeacher(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(StudentPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isStudent(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(AdminPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isAdmin(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(SelfPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isSelf(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!isPass)&#123;<span class="comment">//未授权，返回401信息</span></div><div class="line">            Gson gson=<span class="keyword">new</span> Gson();</div><div class="line">            ResponseJson json=<span class="keyword">new</span> ResponseJson();</div><div class="line">            json.setCode(UNAUTHORIZED.getCode());</div><div class="line">            json.setMessage(UNAUTHORIZED.getMessage());</div><div class="line">            response.setCharacterEncoding(<span class="string">"UTF-8"</span>);  </div><div class="line">            response.getWriter().write(gson.toJson(json));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isPass;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTeacher</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是老师</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isStudent</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是学生</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAdmin</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是管理员</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSelf</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是自身</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 权限拦截器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cqupt.nmid.foreign.interceptor.PermissionsInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注解接口"><a href="#注解接口" class="headerlink" title="注解接口"></a>注解接口</h3><pre><code>在需要权限控制的接口添加注释
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TeacherPermission</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/students/&#123;id&#125;"</span>,method=RequestMethod.GET)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseJson <span class="title">getStudentsInfo</span><span class="params">(@PathVariable(value=<span class="string">"id"</span>)</span> <span class="keyword">int</span> studentId) </span>&#123;</div><div class="line">   <span class="keyword">return</span> studentService.getStudentsInfo(studentId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用注解和拦截器可以很轻松的实现权限控制，这里只是写个例子，只适合简单的权限控制，但是流程已经制定好，可以很简单的进行扩展。如果权限的验证机制比较复杂，例如App接口的token加密验证，单独实现一个权限模块再利用拦截器进行请求分发可能是更好的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java EE项目中，权限控制是经常遇到的问题。尤其是在多角色的系统中，权限控制的粒度更细，也更为重要。&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;系统中有三种角色，教师，管理员，学生，角色权限部分交叉。如果将权限控制的逻辑添加到每一个接口，代码冗杂且不易扩展，维护。我们将权限控制部分单独分离出来，并使用非侵入式的方法为每一个接口添加权限。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://magicwolf.xyz/categories/Java/"/>
    
    
      <category term="Spring MVC" scheme="http://magicwolf.xyz/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC系列(二) 忘记密码功能实现</title>
    <link href="http://magicwolf.xyz/2016/spring-mvc-two/"/>
    <id>http://magicwolf.xyz/2016/spring-mvc-two/</id>
    <published>2016-04-28T16:00:00.000Z</published>
    <updated>2016-12-28T12:59:22.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近为认证系统添加了忘记密码功能，使用了Spring提供的邮件API和Ehchace缓存验证码。整个过程还是挺有趣，值得写一下。</p>
<h2 id="Spring邮件API"><a href="#Spring邮件API" class="headerlink" title="Spring邮件API"></a>Spring邮件API</h2><p>Sprin提供了一个强大方便的邮件API,简化了发送邮件的工作。可以发送富文本邮件，添加附件，使用模板渲染邮件内容。推荐看<strong>Spring实战(第三版)</strong>，这里只简单讲一下如何发送富文本邮件，其他的就不细讲了。</p>
<h3 id="配置邮件发送器"><a href="#配置邮件发送器" class="headerlink" title="配置邮件发送器"></a>配置邮件发送器</h3><p>Spring邮件API的核心是<code>MailSender</code>接口，Spring自带<code>JavaMailSenderImpl</code>实现了<code>MailSender</code>接口，所以需要将<code>JavaMailSenderImpl</code>装配到容器中。</p>
<a id="more"></a>
<h4 id="Mail-xml"><a href="#Mail-xml" class="headerlink" title="Mail.xml"></a>Mail.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--读取外部属性文件--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:Mail.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置了mailSender--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailSender"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.javamail.JavaMailSenderImpl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.host&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.username&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.password&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaMailProperties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.auth"</span>&gt;</span>$&#123;mail.smtp.auth&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.timeout"</span>&gt;</span>$&#123;mail.smtp.timeout&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Mail-properties"><a href="#Mail-properties" class="headerlink" title="Mail.properties"></a>Mail.properties</h3><p>使用QQ的邮件服务器，需要在QQ邮箱设置中开启STMP服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mail.from=dai.dongliang@foxmail.com</div><div class="line">mail.host=smtp.qq.com</div><div class="line">mail.port=25</div><div class="line">mail.username=675742730  </div><div class="line">mail.password=*********</div><div class="line">mail.smtp.auth=true  </div><div class="line">mail.smtp.timeout=25000</div></pre></td></tr></table></figure>
<h3 id="Main-Java"><a href="#Main-Java" class="headerlink" title="Main.Java"></a>Main.Java</h3><p>这只是简单的构造了一个带有链接的邮件，其他更复杂的用法就不介绍了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"Mail.xml"</span>);</div><div class="line">        JavaMailSenderImpl sender = (JavaMailSenderImpl)context.getBean(<span class="string">"mailSender"</span>);</div><div class="line">        <span class="comment">//构建邮件</span></div><div class="line">        MimeMessage message=sender.createMimeMessage();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//使用MimeMessageHelper构建Mime类型邮件</span></div><div class="line">            MimeMessageHelper helper= <span class="keyword">new</span> MimeMessageHelper(message,<span class="keyword">true</span>);</div><div class="line">            helper.setFrom(<span class="string">"dai.dongliang@foxmail.com"</span>);</div><div class="line">            helper.setTo(<span class="string">"xxxxxxx@foxmail.com"</span>);</div><div class="line">            message.setSubject(<span class="string">"Spring Mail Test"</span>);</div><div class="line">            <span class="comment">//第二个参数true表明信息类型是multipart类型</span></div><div class="line">            helper.setText(<span class="string">"&lt;a href=\"http://www.magicwolf.xyz\"&gt;你好&lt;/a&gt;"</span>,<span class="keyword">true</span>);</div><div class="line">            sender.send(message);</div><div class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"邮件构造失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此一封邮件就发送出去了，可以坐等收件人查看了。</p>
<h2 id="Ehcache缓存"><a href="#Ehcache缓存" class="headerlink" title="Ehcache缓存"></a>Ehcache缓存</h2><p>Spring中内置了对Ehcache的支持，封装了<code>EhCacheCacheManager</code>，可以很方便的使用Ehcache。</p>
<h3 id="配置CacheManager"><a href="#配置CacheManager" class="headerlink" title="配置CacheManager"></a>配置CacheManager</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!--配置cacheManager--&gt;</span>    </div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheCacheManager"</span></span></div><div class="line">		<span class="attr">p:cache-manager-ref</span>=<span class="string">"ehcache"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- EhCache library setup --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehcache"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span></div><div class="line">		<span class="attr">p:config-location</span>=<span class="string">"classpath:ehcache.xml"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ehcache-xml"><a href="#ehcache-xml" class="headerlink" title="ehcache.xml"></a>ehcache.xml</h3><p>Ehcache的配置文件，这里配置一个名为CodeCache的chahe用于保存验证码。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"ehcache.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span> /&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置自定义缓存 </span></div><div class="line">	    name：Cache的名称，必须是唯一的(ehcache会把这个cache放到HashMap里)。 </div><div class="line">		maxElementsInMemory：内存中保持的对象数量。 </div><div class="line">		maxElementsOnDisk：DiskStore中保持的对象数量，默认值为0，表示不限制。 </div><div class="line">		eternal：是否是永恒数据，如果是，则它的超时设置会被忽略。 </div><div class="line">		overflowToDisk：如果内存中数据数量超过maxElementsInMemory限制，是否要缓存到磁盘上。 </div><div class="line">		timeToIdleSeconds：对象空闲时间，指对象在多长时间没有被访问就会失效。只对eternal为false的有效。默认值0，表示一直可以访问。 </div><div class="line">		timeToLiveSeconds：对象存活时间，指对象从创建到失效所需要的时间。只对eternal为false的有效。默认值0，表示一直可以访问。 </div><div class="line">		diskPersistent：是否在磁盘上持久化。指重启jvm后，数据是否有效。默认为false。 </div><div class="line">		diskExpiryThreadIntervalSeconds：对象检测线程运行时间间隔。标识对象状态的线程多长时间运行一次。 </div><div class="line">		diskSpoolBufferSizeMB：DiskStore使用的磁盘大小，默认值30MB。每个cache使用各自的DiskStore。 </div><div class="line">		memoryStoreEvictionPolicy：如果内存中数据超过内存限制，向磁盘缓存时的策略。默认值LRU，可选FIFO、LFU。 </div><div class="line">	    --&gt;</div><div class="line"></div><div class="line">	  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"CodeCache"</span> </span></div><div class="line">       <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></div><div class="line">       <span class="attr">eternal</span>=<span class="string">"false"</span> </div><div class="line">       <span class="attr">overflowToDisk</span>=<span class="string">"false"</span> </div><div class="line">       <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></div><div class="line">       <span class="attr">timeToLiveSeconds</span>=<span class="string">"300"</span> </div><div class="line">       <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LFU"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><p>Ehcache的基本用法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"auth-cache.xml"</span>);</div><div class="line">        <span class="comment">//得到缓存管理器</span></div><div class="line">        EhCacheCacheManager cacheManager = (EhCacheCacheManager)context.getBean(<span class="string">"cacheManager"</span>);</div><div class="line">        <span class="comment">//得到Cache</span></div><div class="line">        Cache cache = cacheManager.getCache(<span class="string">"CodeCache"</span>);</div><div class="line">        <span class="comment">//存入缓存，这里是验证码对应用户名</span></div><div class="line">        cache.put(<span class="string">"123"</span>,<span class="string">"magicwolf"</span>);</div><div class="line">        <span class="comment">//取出缓存</span></div><div class="line">        System.out.println(cache.get(<span class="string">"123"</span>,String.class));</div><div class="line">        <span class="comment">//删除缓存</span></div><div class="line">        cache.evict(<span class="string">"123"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="忘记密码功能实现"><a href="#忘记密码功能实现" class="headerlink" title="忘记密码功能实现"></a>忘记密码功能实现</h2><p>上面已经把关键点介绍了，剩余的就是如何组织代码，设计密码找回流程。代码很简单就不贴出了。</p>
<h3 id="1-显示忘记密码页面"><a href="#1-显示忘记密码页面" class="headerlink" title="1. 显示忘记密码页面"></a>1. 显示忘记密码页面</h3><p>一个简单的表单页面，输入用户名和一个60秒刷新一次的验证码。  </p>
<ul>
<li>需要验证用户名是否存在，邮箱是否已填写。</li>
<li>60秒刷新的验证码防止恶意重置密码。</li>
<li>60秒刷新的验证码实现方式有很多，可以把时间信息存在session或cookie或Ehcache中。</li>
</ul>
<h3 id="2-发送邮件，缓存重置密码令牌。"><a href="#2-发送邮件，缓存重置密码令牌。" class="headerlink" title="2. 发送邮件，缓存重置密码令牌。"></a>2. 发送邮件，缓存重置密码令牌。</h3><ul>
<li>生成一个5分钟内有效的令牌，将令牌和用户id映射保存在Ehcache中。</li>
<li>用令牌值组成重置邮件链接。</li>
<li>从数据库取出邮件地址并发送邮件。</li>
</ul>
<h3 id="3-重置密码"><a href="#3-重置密码" class="headerlink" title="3. 重置密码"></a>3. 重置密码</h3><ul>
<li>用户点击链接进入重置密码界面。</li>
<li>验证令牌值，并得到用户Id,定位到具体用户。</li>
<li>用户修改密码。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>忘记密码功能实现起来比较简单，但是如何设计一个严密的密码找回功能很麻烦。现在这个流程就很薄弱，容易受到攻击。等后面有时间了再来仔细研究一下，添加一些验证条件，比如密保问题，手机号验证这些。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近为认证系统添加了忘记密码功能，使用了Spring提供的邮件API和Ehchace缓存验证码。整个过程还是挺有趣，值得写一下。&lt;/p&gt;
&lt;h2 id=&quot;Spring邮件API&quot;&gt;&lt;a href=&quot;#Spring邮件API&quot; class=&quot;headerlink&quot; title=&quot;Spring邮件API&quot;&gt;&lt;/a&gt;Spring邮件API&lt;/h2&gt;&lt;p&gt;Sprin提供了一个强大方便的邮件API,简化了发送邮件的工作。可以发送富文本邮件，添加附件，使用模板渲染邮件内容。推荐看&lt;strong&gt;Spring实战(第三版)&lt;/strong&gt;，这里只简单讲一下如何发送富文本邮件，其他的就不细讲了。&lt;/p&gt;
&lt;h3 id=&quot;配置邮件发送器&quot;&gt;&lt;a href=&quot;#配置邮件发送器&quot; class=&quot;headerlink&quot; title=&quot;配置邮件发送器&quot;&gt;&lt;/a&gt;配置邮件发送器&lt;/h3&gt;&lt;p&gt;Spring邮件API的核心是&lt;code&gt;MailSender&lt;/code&gt;接口，Spring自带&lt;code&gt;JavaMailSenderImpl&lt;/code&gt;实现了&lt;code&gt;MailSender&lt;/code&gt;接口，所以需要将&lt;code&gt;JavaMailSenderImpl&lt;/code&gt;装配到容器中。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://magicwolf.xyz/categories/Java/"/>
    
    
      <category term="Spring MVC" scheme="http://magicwolf.xyz/tags/Spring-MVC/"/>
    
      <category term="Ehcache" scheme="http://magicwolf.xyz/tags/Ehcache/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC系列（一）利用切面编程进行加密</title>
    <link href="http://magicwolf.xyz/2016/spring-mvc-one/"/>
    <id>http://magicwolf.xyz/2016/spring-mvc-one/</id>
    <published>2016-04-19T16:00:00.000Z</published>
    <updated>2016-12-28T12:26:18.365Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做基于Oauth2.0协议的认证系统，整体认证流程已经完成，但是Oauth2.0需要HTTPS配合，否则会有安全隐患。由于没有HTTPS证书，所以只有自己进行数据加密。利用切面编程可以在不改变原有模块的情况下加入加密功能，与原有模块解耦。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>以一个常见的场景举例。</p>
<ul>
<li>客户端传个服务器一个用户ID和token值，服务器验证token并根据ID返回数据  </li>
<li>传来的token参数已经加密，服务器要根据用户ID查出AES密钥，进行解密，再验证token，并把返回信息加密。<a id="more"></a>
<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2>使用Spring MVC构建这个简单的接口。</li>
</ul>
<h3 id="UserController类"><a href="#UserController类" class="headerlink" title="UserController类"></a>UserController类</h3><p>使用<code>@Controller</code>注解声明控制器。<code>@RequestMapping</code>注解映射地址。<code>@Autowired</code>注解自动注入<code>UserService</code>对象，执行业务逻辑。<code>@RequestParam</code>注解绑定参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userService"</span>)</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/message"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">UserModel <span class="title">message</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> String id,@<span class="title">RequestParam</span><span class="params">(<span class="string">"token"</span>)</span> String token)</span>&#123;</div><div class="line">		<span class="keyword">return</span> userService.message(id,token);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserService类"><a href="#UserService类" class="headerlink" title="UserService类"></a>UserService类</h3><p><code>@Service</code>注解声明服务类。从<code>UserDao</code>中查到用户信息并返回。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> UserModel <span class="title">message</span><span class="params">(String id,String token)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">/*验证token......*/</span></div><div class="line">		<span class="keyword">return</span> userDao.getUserById(id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserDao类"><a href="#UserDao类" class="headerlink" title="UserDao类"></a>UserDao类</h3><p><code>@Repository</code>注解声明仓库类。此处模拟一个数据返回。（Spring MVC 提供的JDBC工具类还是不错的）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> UserModel <span class="title">getUserById</span><span class="params">(String id)</span></span>&#123;</div><div class="line">		UserModel user=<span class="keyword">new</span> UserModel();</div><div class="line">		user.setUserName(<span class="string">"MagicWolf"</span>);</div><div class="line">		user.setEmail(<span class="string">"dai.dongliang@foxmail.com"</span>);</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="UserModel类"><a href="#UserModel类" class="headerlink" title="UserModel类"></a>UserModel类</h3><p>一个简单的POJO对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> String userName;</div><div class="line">	<span class="keyword">private</span> String email;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.userName = userName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> email;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.email = email;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>配置Spring MVC。此处简化了些配置，没有使用模块化配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></div><div class="line">	<span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</div><div class="line">	<span class="comment">&lt;!--字符过滤器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	    	</div><div class="line">	<span class="comment">&lt;!-- spring 前端控制器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WebTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WebTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="WebTest-Servlet-xml"><a href="#WebTest-Servlet-xml" class="headerlink" title="WebTest-Servlet.xml"></a>WebTest-Servlet.xml</h3><p>Spring配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">        http://www.springframework.org/schema/mvc</div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 注册注解驱动特性 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- 开启注解装配 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 扫描注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.magicwolf"</span> /&gt;</span>   	</div><div class="line">    <span class="comment">&lt;!-- 内容视图解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultContentType"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在浏览器输入<code>http://localhost:8080/WebTest/user/message?id=123&amp;token=123</code><br>可以看到返回了用户信息，基本功能完成。</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"userName"</span>: <span class="string">"MagicWolf"</span>,</div><div class="line">    <span class="attr">"email"</span>: <span class="string">"dai.dongliang@foxmail.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解密-加密功能"><a href="#解密-加密功能" class="headerlink" title="解密/加密功能"></a>解密/加密功能</h2><h3 id="方案一：过滤器-拦截器"><a href="#方案一：过滤器-拦截器" class="headerlink" title="方案一：过滤器+拦截器"></a>方案一：过滤器+拦截器</h3><ul>
<li>Spring MVC中有拦截器可以在处理方法执行前拦截，其实内部也是用的切面编程。  </li>
<li>由于`HttpServletRequest``没有提供改变请求参数的接口，所以需要包装一下，使用自己的Request。</li>
</ul>
<h4 id="HttpRequestWapperFilter类"><a href="#HttpRequestWapperFilter类" class="headerlink" title="HttpRequestWapperFilter类"></a>HttpRequestWapperFilter类</h4><p>在<code>doFilter</code>方法中，使用自己的包装类替换<code>HttpServletRequest</code></p>
<pre><code>public class HttpRequestWapperFilter implements Filter{
    @Override
    public void destroy() {}
    @Override
    public void init(FilterConfig arg0) throws ServletException {}

    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain) throws IOException, ServletException {
        request=new HttpRequestWapper((HttpServletRequest)request);
        chain.doFilter(request, response);
    }
}
</code></pre><h4 id="HttpRequestWapper类"><a href="#HttpRequestWapper类" class="headerlink" title="HttpRequestWapper类"></a>HttpRequestWapper类</h4><ul>
<li>继承HttpServletRequestWrapper。  </li>
<li>Spring MVC在绑定参数过程中使用<code>getParameterValues</code>方法，所以我们重写这个方法。  </li>
<li>增加一个私有属性key表示加密密钥。  </li>
<li>如果不怕麻烦完全可以在这一步从<code>request</code>中得到ID参数，然后写JDBC操作查到用户密钥进行解密。但是我想在Spring中使用之前写好的数据库操作类<code>UserDao</code>，所以把查密钥这一步放到了拦截器中。　　</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestWapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</div><div class="line">       <span class="keyword">private</span> String key;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpRequestWapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(request);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> String[] getParameterValues(String name) &#123;</div><div class="line">		String[] strs=<span class="keyword">super</span>.getParameterValues(name);</div><div class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"id"</span>))&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.length;i++)</div><div class="line">				strs[i]=AESCodec.decrypt(strs[i], key);<span class="comment">//AES解密</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> strs;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.key = key;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UserMessageInterceptor类"><a href="#UserMessageInterceptor类" class="headerlink" title="UserMessageInterceptor类"></a>UserMessageInterceptor类</h4><p>在拦截器里可以方便的使用SPring注入<code>UserDao</code>。在<code>preHandle</code>方法中设置key的值<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    public class UserMessageInterceptor extends HandlerInterceptorAdapter&#123;</div><div class="line">    	@Autowired</div><div class="line">    	@Qualifier("userDao")</div><div class="line">    	private UserDao userDao;</div><div class="line">    	</div><div class="line">    	@Override</div><div class="line">    	public boolean preHandle(HttpServletRequest request,</div><div class="line">    			HttpServletResponse response, Object handler) throws Exception &#123;</div><div class="line">    		String key=userDao.getAESKeyByUserId(request.getParameter("id"));</div><div class="line">    		((HttpRequestWapper)request).setKey(key);</div><div class="line">    		return true;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">```    </div><div class="line">#### web.xml</div><div class="line">在配置文件中加入包装类的过滤器</div><div class="line">``` xml</div><div class="line">    	&lt;filter&gt;</div><div class="line">    	   &lt;filter-name&gt;HttpWapperFilter&lt;/filter-name&gt;</div><div class="line">    	   &lt;filter-class&gt;com.magicwolf.HttpRequestWapperFilter&lt;/filter-class&gt;</div><div class="line">    	&lt;/filter&gt;</div><div class="line">    	&lt;filter-mapping&gt;</div><div class="line">    	   &lt;filter-name&gt;HttpWapperFilter&lt;/filter-name&gt;</div><div class="line">    	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    	&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p>
<h4 id="WebTest-Servlet-xml-1"><a href="#WebTest-Servlet-xml-1" class="headerlink" title="WebTest-Servlet.xml"></a>WebTest-Servlet.xml</h4><p>加入拦截器配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>    </div><div class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span> /&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.magicwolf.UserMessageInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><ul>
<li>在浏览器输入<code>http://localhost:8080/WebTest/user/message?id=123&amp;token=0lCQPVTc8WCNP2FxocbC7Q==</code>  </li>
<li>此时token值已经经过加密，在控制器message方法中打印token参数，可以成功打印出123</li>
</ul>
<h4 id="返回信息加密"><a href="#返回信息加密" class="headerlink" title="返回信息加密"></a>返回信息加密</h4><p>返回信息的加密原理上跟解密一样，而且本文重点也不在这，所以这里就简单说一下思路。</p>
<ul>
<li>包装<code>HttpServletResponse</code>对象，添加一个<code>toByteArray()</code>方法返回输出缓冲区的内容</li>
<li>在过滤器中先调用<code>doFilter</code>执行请求，之后使用<code>toByteArray()</code>方法得到缓冲区字节，在进行加密。  </li>
</ul>
<h3 id="方案二：切面编程"><a href="#方案二：切面编程" class="headerlink" title="方案二：切面编程"></a>方案二：切面编程</h3><p>使用了Spring的AOP后，解决这个问题就变的轻松加愉快了。关于AOP这里就不做详细描述了。</p>
<h4 id="AESAspect类"><a href="#AESAspect类" class="headerlink" title="AESAspect类"></a>AESAspect类</h4><p>声明切面。</p>
<ul>
<li><code>@Component</code>注解用于声明组件。</li>
<li><code>@Aspect</code>注解用于声明切面。</li>
<li><code>@Pointcut</code>注解声明切点，括号里是切点表达式，这里定位到UserService类的message方法</li>
<li><code>@Around</code>声明是环绕通知方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"AESAspect"</span>)</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESAspect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line"></div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"execution(* com.magicwolf.UserService.message(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messagePointcut</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Around</span>(<span class="string">"messagePointcut()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> UserModel <span class="title">messagePointcut</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Object[] args = point.getArgs();</div><div class="line">		String id = (String) args[<span class="number">0</span>];</div><div class="line">		String key = userDao.getAESKeyByUserId(id);</div><div class="line">		AESCodec.decrypt((String) args[<span class="number">1</span>], key);</div><div class="line">		<span class="comment">// 执行</span></div><div class="line">		UserModel result = (UserModel) point.proceed(args);</div><div class="line">		<span class="comment">// 返回值加密</span></div><div class="line">		result.encrypt(key);</div><div class="line">		<span class="comment">// 返回结果</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UserModel类-1"><a href="#UserModel类-1" class="headerlink" title="UserModel类"></a>UserModel类</h4><p>在UserModel中添加一个加密成员变量的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(String key)</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.userName=AESCodec.encrypt(userName, key);</div><div class="line">	<span class="keyword">this</span>.email=AESCodec.encrypt(email, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="WebTest-servlet-xml"><a href="#WebTest-servlet-xml" class="headerlink" title="WebTest-servlet.xml"></a>WebTest-servlet.xml</h4><p>更改代理方式，使用cglib代理来替换JDK代理。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">```   </div><div class="line">#### 测试</div><div class="line">在浏览器中输入`http://localhost:8080/WebTest/user/message?id=123&amp;token=0lCQPVTc8WCNP2FxocbC7Q==`  </div><div class="line">##### 返回值</div><div class="line">此时返回值已经加密</div><div class="line">``` json</div><div class="line">    &#123;</div><div class="line">    userName: "U/6CJMzF1IRV/HpEjDJPEQ==",</div><div class="line">    email: "kQAV7t4611RYADmDC69odyQmES+MXv+p4OmYMC8fSoU="</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>通过两种方法的对比可以看到，使用切面编程，模块间耦合程度很低，架构清晰，易于实现。</li>
<li>但是这仅仅是一个小小的测试，如果项目规模扩大，想要织入一个功能就需要经过精心的设计，从何处切入，切点如何组织都是需要考虑的。如果没设计好，切面部位或许将成为一个重灾区（认证系统里的加密切面就显得有些凌乱，庞杂，但我也不知道该如何优化）</li>
<li>还有个小问题，拦截器里应该是可以直接对<code>request</code>对象进行包装的，可是我在拦截器里进行包装却没有效果，可能是此处的<code>request</code>对象只是一个拷贝吧。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做基于Oauth2.0协议的认证系统，整体认证流程已经完成，但是Oauth2.0需要HTTPS配合，否则会有安全隐患。由于没有HTTPS证书，所以只有自己进行数据加密。利用切面编程可以在不改变原有模块的情况下加入加密功能，与原有模块解耦。&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;以一个常见的场景举例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端传个服务器一个用户ID和token值，服务器验证token并根据ID返回数据  &lt;/li&gt;
&lt;li&gt;传来的token参数已经加密，服务器要根据用户ID查出AES密钥，进行解密，再验证token，并把返回信息加密。
    
    </summary>
    
      <category term="Java" scheme="http://magicwolf.xyz/categories/Java/"/>
    
    
      <category term="AOP" scheme="http://magicwolf.xyz/tags/AOP/"/>
    
      <category term="Spring MVC" scheme="http://magicwolf.xyz/tags/Spring-MVC/"/>
    
  </entry>
  
</feed>
