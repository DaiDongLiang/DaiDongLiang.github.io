<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MagicWolf</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://magicwolf.xyz/"/>
  <updated>2016-12-26T13:26:30.572Z</updated>
  <id>http://magicwolf.xyz/</id>
  
  <author>
    <name>MagicWolf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring MVC系列(三) 基于注解的权限控制</title>
    <link href="http://magicwolf.xyz/2016/spring-mvc-three/"/>
    <id>http://magicwolf.xyz/2016/spring-mvc-three/</id>
    <published>2016-05-09T16:00:00.000Z</published>
    <updated>2016-12-26T13:26:30.572Z</updated>
    
    <content type="html"><![CDATA[<p>在Java EE项目中，权限控制是经常遇到的问题。尤其是在多角色的系统中，权限控制的粒度更细，也更为重要。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>系统中有三种角色，教师，管理员，学生，角色权限部分交叉。如果将权限控制的逻辑添加到每一个接口，代码冗杂且不易扩展，维护。我们将权限控制部分单独分离出来，并使用非侵入式的方法为每一个接口添加权限。</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>注解:利用Java的注解机制，在运行时得到接口的权限信息。</li>
<li>AOP:Spring MVC提供了拦截器功能，本质上是AOP。通过拦截器在处理请求前统一检验权限，在不改变业务代码的基础上添加了权限控制。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="学生权限-StudentPermission"><a href="#学生权限-StudentPermission" class="headerlink" title="学生权限:StudentPermission"></a>学生权限:StudentPermission</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StudentPermission &#123;&#125;</div></pre></td></tr></table></figure>
<p>还定义了教师权限(TeacherPermission)、管理员权限(AdminPermission)、自身权限(SelfPermission)。这里只定义空注解，起标记作用。</p>
<h3 id="添加拦截器-PermissionsInterceptor"><a href="#添加拦截器-PermissionsInterceptor" class="headerlink" title="添加拦截器:PermissionsInterceptor"></a>添加拦截器:PermissionsInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionsInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</div><div class="line">        Method method = handlerMethod.getMethod();</div><div class="line">        <span class="keyword">boolean</span> isPass=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(TeacherPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isTeacher(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(StudentPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isStudent(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(AdminPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isAdmin(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(method.getAnnotation(SelfPermission.class)!=<span class="keyword">null</span>)&#123;</div><div class="line">            isPass=isSelf(request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!isPass)&#123;<span class="comment">//未授权，返回401信息</span></div><div class="line">            Gson gson=<span class="keyword">new</span> Gson();</div><div class="line">            ResponseJson json=<span class="keyword">new</span> ResponseJson();</div><div class="line">            json.setCode(UNAUTHORIZED.getCode());</div><div class="line">            json.setMessage(UNAUTHORIZED.getMessage());</div><div class="line">            response.setCharacterEncoding(<span class="string">"UTF-8"</span>);  </div><div class="line">            response.getWriter().write(gson.toJson(json));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isPass;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTeacher</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是老师</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isStudent</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是学生</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAdmin</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是管理员</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSelf</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        <span class="comment">//判断是否是自身</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 权限拦截器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cqupt.nmid.foreign.interceptor.PermissionsInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注解接口"><a href="#注解接口" class="headerlink" title="注解接口"></a>注解接口</h3><pre><code>在需要权限控制的接口添加注释
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TeacherPermission</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/students/&#123;id&#125;"</span>,method=RequestMethod.GET)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseJson <span class="title">getStudentsInfo</span><span class="params">(@PathVariable(value=<span class="string">"id"</span>)</span> <span class="keyword">int</span> studentId) </span>&#123;</div><div class="line">   <span class="keyword">return</span> studentService.getStudentsInfo(studentId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用注解和拦截器可以很轻松的实现权限控制，这里只是写个例子，只适合简单的权限控制，但是流程已经制定好，可以很简单的进行扩展。如果权限的验证机制比较复杂，例如App接口的token加密验证，单独实现一个权限模块再利用拦截器进行请求分发可能是更好的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java EE项目中，权限控制是经常遇到的问题。尤其是在多角色的系统中，权限控制的粒度更细，也更为重要。&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;系统中有三种角色，教师，管理员，学生，角色权限部分交叉。如果将权限控制的逻辑添加到每一个接口，代码冗杂且不易扩展，维护。我们将权限控制部分单独分离出来，并使用非侵入式的方法为每一个接口添加权限。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://magicwolf.xyz/categories/Java/"/>
    
    
      <category term="Spring MVC" scheme="http://magicwolf.xyz/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC系列(二) 忘记密码功能实现</title>
    <link href="http://magicwolf.xyz/2016/spring-mvc-two/"/>
    <id>http://magicwolf.xyz/2016/spring-mvc-two/</id>
    <published>2016-04-28T16:00:00.000Z</published>
    <updated>2016-12-26T13:15:05.666Z</updated>
    
    <content type="html"><![CDATA[<p>最近为认证系统添加了忘记密码功能，使用了Spring提供的邮件API和Ehchace缓存验证码。整个过程还是挺有趣，值得写一下。</p>
<h2 id="Spring邮件API"><a href="#Spring邮件API" class="headerlink" title="Spring邮件API"></a>Spring邮件API</h2><p>Sprin提供了一个强大方便的邮件API,简化了发送邮件的工作。可以发送富文本邮件，添加附件，使用模板渲染邮件内容。推荐看<strong>Spring实战(第三版)</strong>，这里只简单讲一下如何发送富文本邮件，其他的就不细讲了。</p>
<h3 id="配置邮件发送器"><a href="#配置邮件发送器" class="headerlink" title="配置邮件发送器"></a>配置邮件发送器</h3><p>Spring邮件API的核心是<code>MailSender</code>接口，Spring自带<code>JavaMailSenderImpl</code>实现了<code>MailSender</code>接口，所以需要将<code>JavaMailSenderImpl</code>装配到容器中。</p>
<a id="more"></a>
<h4 id="Mail-xml"><a href="#Mail-xml" class="headerlink" title="Mail.xml"></a>Mail.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--读取外部属性文件--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:Mail.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置了mailSender--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailSender"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.javamail.JavaMailSenderImpl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.host&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.username&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.password&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaMailProperties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.auth"</span>&gt;</span>$&#123;mail.smtp.auth&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.timeout"</span>&gt;</span>$&#123;mail.smtp.timeout&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Mail-properties"><a href="#Mail-properties" class="headerlink" title="Mail.properties"></a>Mail.properties</h3><p>使用QQ的邮件服务器，需要在QQ邮箱设置中开启STMP服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mail.from=dai.dongliang@foxmail.com</div><div class="line">mail.host=smtp.qq.com</div><div class="line">mail.port=25</div><div class="line">mail.username=675742730  </div><div class="line">mail.password=*********</div><div class="line">mail.smtp.auth=true  </div><div class="line">mail.smtp.timeout=25000</div></pre></td></tr></table></figure>
<h3 id="Main-Java"><a href="#Main-Java" class="headerlink" title="Main.Java"></a>Main.Java</h3><p>这只是简单的构造了一个带有链接的邮件，其他更复杂的用法就不介绍了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"Mail.xml"</span>);</div><div class="line">        JavaMailSenderImpl sender = (JavaMailSenderImpl)context.getBean(<span class="string">"mailSender"</span>);</div><div class="line">        <span class="comment">//构建邮件</span></div><div class="line">        MimeMessage message=sender.createMimeMessage();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//使用MimeMessageHelper构建Mime类型邮件</span></div><div class="line">            MimeMessageHelper helper= <span class="keyword">new</span> MimeMessageHelper(message,<span class="keyword">true</span>);</div><div class="line">            helper.setFrom(<span class="string">"dai.dongliang@foxmail.com"</span>);</div><div class="line">            helper.setTo(<span class="string">"xxxxxxx@foxmail.com"</span>);</div><div class="line">            message.setSubject(<span class="string">"Spring Mail Test"</span>);</div><div class="line">            <span class="comment">//第二个参数true表明信息类型是multipart类型</span></div><div class="line">            helper.setText(<span class="string">"&lt;a href=\"http://www.magicwolf.xyz\"&gt;你好&lt;/a&gt;"</span>,<span class="keyword">true</span>);</div><div class="line">            sender.send(message);</div><div class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"邮件构造失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此一封邮件就发送出去了，可以坐等收件人查看了。</p>
<h2 id="Ehcache缓存"><a href="#Ehcache缓存" class="headerlink" title="Ehcache缓存"></a>Ehcache缓存</h2><p>Spring中内置了对Ehcache的支持，封装了<code>EhCacheCacheManager</code>，可以很方便的使用Ehcache。</p>
<h3 id="配置CacheManager"><a href="#配置CacheManager" class="headerlink" title="配置CacheManager"></a>配置CacheManager</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!--配置cacheManager--&gt;</span>    </div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheCacheManager"</span></span></div><div class="line">		<span class="attr">p:cache-manager-ref</span>=<span class="string">"ehcache"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- EhCache library setup --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehcache"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span></div><div class="line">		<span class="attr">p:config-location</span>=<span class="string">"classpath:ehcache.xml"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ehcache-xml"><a href="#ehcache-xml" class="headerlink" title="ehcache.xml"></a>ehcache.xml</h3><p>Ehcache的配置文件，这里配置一个名为CodeCache的chahe用于保存验证码。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"ehcache.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span> /&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置自定义缓存 </span></div><div class="line">	    name：Cache的名称，必须是唯一的(ehcache会把这个cache放到HashMap里)。 </div><div class="line">		maxElementsInMemory：内存中保持的对象数量。 </div><div class="line">		maxElementsOnDisk：DiskStore中保持的对象数量，默认值为0，表示不限制。 </div><div class="line">		eternal：是否是永恒数据，如果是，则它的超时设置会被忽略。 </div><div class="line">		overflowToDisk：如果内存中数据数量超过maxElementsInMemory限制，是否要缓存到磁盘上。 </div><div class="line">		timeToIdleSeconds：对象空闲时间，指对象在多长时间没有被访问就会失效。只对eternal为false的有效。默认值0，表示一直可以访问。 </div><div class="line">		timeToLiveSeconds：对象存活时间，指对象从创建到失效所需要的时间。只对eternal为false的有效。默认值0，表示一直可以访问。 </div><div class="line">		diskPersistent：是否在磁盘上持久化。指重启jvm后，数据是否有效。默认为false。 </div><div class="line">		diskExpiryThreadIntervalSeconds：对象检测线程运行时间间隔。标识对象状态的线程多长时间运行一次。 </div><div class="line">		diskSpoolBufferSizeMB：DiskStore使用的磁盘大小，默认值30MB。每个cache使用各自的DiskStore。 </div><div class="line">		memoryStoreEvictionPolicy：如果内存中数据超过内存限制，向磁盘缓存时的策略。默认值LRU，可选FIFO、LFU。 </div><div class="line">	    --&gt;</div><div class="line"></div><div class="line">	  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"CodeCache"</span> </span></div><div class="line">       <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></div><div class="line">       <span class="attr">eternal</span>=<span class="string">"false"</span> </div><div class="line">       <span class="attr">overflowToDisk</span>=<span class="string">"false"</span> </div><div class="line">       <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></div><div class="line">       <span class="attr">timeToLiveSeconds</span>=<span class="string">"300"</span> </div><div class="line">       <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LFU"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><p>Ehcache的基本用法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"auth-cache.xml"</span>);</div><div class="line">        <span class="comment">//得到缓存管理器</span></div><div class="line">        EhCacheCacheManager cacheManager = (EhCacheCacheManager)context.getBean(<span class="string">"cacheManager"</span>);</div><div class="line">        <span class="comment">//得到Cache</span></div><div class="line">        Cache cache = cacheManager.getCache(<span class="string">"CodeCache"</span>);</div><div class="line">        <span class="comment">//存入缓存，这里是验证码对应用户名</span></div><div class="line">        cache.put(<span class="string">"123"</span>,<span class="string">"magicwolf"</span>);</div><div class="line">        <span class="comment">//取出缓存</span></div><div class="line">        System.out.println(cache.get(<span class="string">"123"</span>,String.class));</div><div class="line">        <span class="comment">//删除缓存</span></div><div class="line">        cache.evict(<span class="string">"123"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="忘记密码功能实现"><a href="#忘记密码功能实现" class="headerlink" title="忘记密码功能实现"></a>忘记密码功能实现</h2><p>上面已经把关键点介绍了，剩余的就是如何组织代码，设计密码找回流程。代码很简单就不贴出了。</p>
<h3 id="1-显示忘记密码页面"><a href="#1-显示忘记密码页面" class="headerlink" title="1. 显示忘记密码页面"></a>1. 显示忘记密码页面</h3><p>一个简单的表单页面，输入用户名和一个60秒刷新一次的验证码。  </p>
<ul>
<li>需要验证用户名是否存在，邮箱是否已填写。</li>
<li>60秒刷新的验证码防止恶意重置密码。</li>
<li>60秒刷新的验证码实现方式有很多，可以把时间信息存在session或cookie或Ehcache中。</li>
</ul>
<h3 id="2-发送邮件，缓存重置密码令牌。"><a href="#2-发送邮件，缓存重置密码令牌。" class="headerlink" title="2. 发送邮件，缓存重置密码令牌。"></a>2. 发送邮件，缓存重置密码令牌。</h3><ul>
<li>生成一个5分钟内有效的令牌，将令牌和用户id映射保存在Ehcache中。</li>
<li>用令牌值组成重置邮件链接。</li>
<li>从数据库取出邮件地址并发送邮件。</li>
</ul>
<h3 id="3-重置密码"><a href="#3-重置密码" class="headerlink" title="3. 重置密码"></a>3. 重置密码</h3><ul>
<li>用户点击链接进入重置密码界面。</li>
<li>验证令牌值，并得到用户Id,定位到具体用户。</li>
<li>用户修改密码。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>忘记密码功能实现起来比较简单，但是如何设计一个严密的密码找回功能很麻烦。现在这个流程就很薄弱，容易受到攻击。等后面有时间了再来仔细研究一下，添加一些验证条件，比如密保问题，手机号验证这些。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近为认证系统添加了忘记密码功能，使用了Spring提供的邮件API和Ehchace缓存验证码。整个过程还是挺有趣，值得写一下。&lt;/p&gt;
&lt;h2 id=&quot;Spring邮件API&quot;&gt;&lt;a href=&quot;#Spring邮件API&quot; class=&quot;headerlink&quot; title=&quot;Spring邮件API&quot;&gt;&lt;/a&gt;Spring邮件API&lt;/h2&gt;&lt;p&gt;Sprin提供了一个强大方便的邮件API,简化了发送邮件的工作。可以发送富文本邮件，添加附件，使用模板渲染邮件内容。推荐看&lt;strong&gt;Spring实战(第三版)&lt;/strong&gt;，这里只简单讲一下如何发送富文本邮件，其他的就不细讲了。&lt;/p&gt;
&lt;h3 id=&quot;配置邮件发送器&quot;&gt;&lt;a href=&quot;#配置邮件发送器&quot; class=&quot;headerlink&quot; title=&quot;配置邮件发送器&quot;&gt;&lt;/a&gt;配置邮件发送器&lt;/h3&gt;&lt;p&gt;Spring邮件API的核心是&lt;code&gt;MailSender&lt;/code&gt;接口，Spring自带&lt;code&gt;JavaMailSenderImpl&lt;/code&gt;实现了&lt;code&gt;MailSender&lt;/code&gt;接口，所以需要将&lt;code&gt;JavaMailSenderImpl&lt;/code&gt;装配到容器中。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://magicwolf.xyz/categories/Java/"/>
    
    
      <category term="Spring MVC" scheme="http://magicwolf.xyz/tags/Spring-MVC/"/>
    
      <category term="Ehcache" scheme="http://magicwolf.xyz/tags/Ehcache/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC系列（一）利用切面编程进行加密</title>
    <link href="http://magicwolf.xyz/2016/spring-mvc-one/"/>
    <id>http://magicwolf.xyz/2016/spring-mvc-one/</id>
    <published>2016-04-19T16:00:00.000Z</published>
    <updated>2016-12-26T12:55:51.791Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做基于Oauth2.0协议的认证系统，整体认证流程已经完成，但是Oauth2.0需要HTTPS配合，否则会有安全隐患。由于没有HTTPS证书，所以只有自己进行数据加密。利用切面编程可以在不改变原有模块的情况下加入加密功能，与原有模块解耦。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>以一个常见的场景举例。</p>
<ul>
<li>客户端传个服务器一个用户ID和token值，服务器验证token并根据ID返回数据  </li>
<li>传来的token参数已经加密，服务器要根据用户ID查出AES密钥，进行解密，再验证token，并把返回信息加密。<a id="more"></a>
<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2>使用Spring MVC构建这个简单的接口。</li>
</ul>
<h3 id="UserController类"><a href="#UserController类" class="headerlink" title="UserController类"></a>UserController类</h3><p>使用<code>@Controller</code>注解声明控制器。<code>@RequestMapping</code>注解映射地址。<code>@Autowired</code>注解自动注入<code>UserService</code>对象，执行业务逻辑。<code>@RequestParam</code>注解绑定参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userService"</span>)</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/message"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">UserModel <span class="title">message</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> String id,@<span class="title">RequestParam</span><span class="params">(<span class="string">"token"</span>)</span> String token)</span>&#123;</div><div class="line">		<span class="keyword">return</span> userService.message(id,token);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserService类"><a href="#UserService类" class="headerlink" title="UserService类"></a>UserService类</h3><p><code>@Service</code>注解声明服务类。从<code>UserDao</code>中查到用户信息并返回。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> UserModel <span class="title">message</span><span class="params">(String id,String token)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">/*验证token......*/</span></div><div class="line">		<span class="keyword">return</span> userDao.getUserById(id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserDao类"><a href="#UserDao类" class="headerlink" title="UserDao类"></a>UserDao类</h3><p><code>@Repository</code>注解声明仓库类。此处模拟一个数据返回。（Spring MVC 提供的JDBC工具类还是不错的）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> UserModel <span class="title">getUserById</span><span class="params">(String id)</span></span>&#123;</div><div class="line">		UserModel user=<span class="keyword">new</span> UserModel();</div><div class="line">		user.setUserName(<span class="string">"MagicWolf"</span>);</div><div class="line">		user.setEmail(<span class="string">"dai.dongliang@foxmail.com"</span>);</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="UserModel类"><a href="#UserModel类" class="headerlink" title="UserModel类"></a>UserModel类</h3><p>一个简单的POJO对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> String userName;</div><div class="line">	<span class="keyword">private</span> String email;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.userName = userName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> email;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.email = email;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>配置Spring MVC。此处简化了些配置，没有使用模块化配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></div><div class="line">	<span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</div><div class="line">	<span class="comment">&lt;!--字符过滤器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	    	</div><div class="line">	<span class="comment">&lt;!-- spring 前端控制器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WebTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WebTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="WebTest-Servlet-xml"><a href="#WebTest-Servlet-xml" class="headerlink" title="WebTest-Servlet.xml"></a>WebTest-Servlet.xml</h3><p>Spring配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">        http://www.springframework.org/schema/mvc</div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 注册注解驱动特性 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- 开启注解装配 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 扫描注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.magicwolf"</span> /&gt;</span>   	</div><div class="line">    <span class="comment">&lt;!-- 内容视图解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultContentType"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在浏览器输入<code>http://localhost:8080/WebTest/user/message?id=123&amp;token=123</code><br>可以看到返回了用户信息，基本功能完成。</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"userName"</span>: <span class="string">"MagicWolf"</span>,</div><div class="line">    <span class="attr">"email"</span>: <span class="string">"dai.dongliang@foxmail.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解密-加密功能"><a href="#解密-加密功能" class="headerlink" title="解密/加密功能"></a>解密/加密功能</h2><h3 id="方案一：过滤器-拦截器"><a href="#方案一：过滤器-拦截器" class="headerlink" title="方案一：过滤器+拦截器"></a>方案一：过滤器+拦截器</h3><ul>
<li>Spring MVC中有拦截器可以在处理方法执行前拦截，其实内部也是用的切面编程。  </li>
<li>由于`HttpServletRequest``没有提供改变请求参数的接口，所以需要包装一下，使用自己的Request。</li>
</ul>
<h4 id="HttpRequestWapperFilter类"><a href="#HttpRequestWapperFilter类" class="headerlink" title="HttpRequestWapperFilter类"></a>HttpRequestWapperFilter类</h4><p>在<code>doFilter</code>方法中，使用自己的包装类替换<code>HttpServletRequest</code></p>
<pre><code>public class HttpRequestWapperFilter implements Filter{
    @Override
    public void destroy() {}
    @Override
    public void init(FilterConfig arg0) throws ServletException {}

    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain) throws IOException, ServletException {
        request=new HttpRequestWapper((HttpServletRequest)request);
        chain.doFilter(request, response);
    }
}
</code></pre><h4 id="HttpRequestWapper类"><a href="#HttpRequestWapper类" class="headerlink" title="HttpRequestWapper类"></a>HttpRequestWapper类</h4><ul>
<li>继承HttpServletRequestWrapper。  </li>
<li>Spring MVC在绑定参数过程中使用<code>getParameterValues</code>方法，所以我们重写这个方法。  </li>
<li>增加一个私有属性key表示加密密钥。  </li>
<li>如果不怕麻烦完全可以在这一步从<code>request</code>中得到ID参数，然后写JDBC操作查到用户密钥进行解密。但是我想在Spring中使用之前写好的数据库操作类<code>UserDao</code>，所以把查密钥这一步放到了拦截器中。　　</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestWapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</div><div class="line">       <span class="keyword">private</span> String key;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpRequestWapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(request);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> String[] getParameterValues(String name) &#123;</div><div class="line">		String[] strs=<span class="keyword">super</span>.getParameterValues(name);</div><div class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"id"</span>))&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.length;i++)</div><div class="line">				strs[i]=AESCodec.decrypt(strs[i], key);<span class="comment">//AES解密</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> strs;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.key = key;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UserMessageInterceptor类"><a href="#UserMessageInterceptor类" class="headerlink" title="UserMessageInterceptor类"></a>UserMessageInterceptor类</h4><p>在拦截器里可以方便的使用SPring注入<code>UserDao</code>。在<code>preHandle</code>方法中设置key的值<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    public class UserMessageInterceptor extends HandlerInterceptorAdapter&#123;</div><div class="line">    	@Autowired</div><div class="line">    	@Qualifier("userDao")</div><div class="line">    	private UserDao userDao;</div><div class="line">    	</div><div class="line">    	@Override</div><div class="line">    	public boolean preHandle(HttpServletRequest request,</div><div class="line">    			HttpServletResponse response, Object handler) throws Exception &#123;</div><div class="line">    		String key=userDao.getAESKeyByUserId(request.getParameter("id"));</div><div class="line">    		((HttpRequestWapper)request).setKey(key);</div><div class="line">    		return true;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">```    </div><div class="line">#### web.xml</div><div class="line">在配置文件中加入包装类的过滤器</div><div class="line">``` xml</div><div class="line">    	&lt;filter&gt;</div><div class="line">    	   &lt;filter-name&gt;HttpWapperFilter&lt;/filter-name&gt;</div><div class="line">    	   &lt;filter-class&gt;com.magicwolf.HttpRequestWapperFilter&lt;/filter-class&gt;</div><div class="line">    	&lt;/filter&gt;</div><div class="line">    	&lt;filter-mapping&gt;</div><div class="line">    	   &lt;filter-name&gt;HttpWapperFilter&lt;/filter-name&gt;</div><div class="line">    	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    	&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p>
<h4 id="WebTest-Servlet-xml-1"><a href="#WebTest-Servlet-xml-1" class="headerlink" title="WebTest-Servlet.xml"></a>WebTest-Servlet.xml</h4><p>加入拦截器配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>    </div><div class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span> /&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.magicwolf.UserMessageInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><ul>
<li>在浏览器输入<code>http://localhost:8080/WebTest/user/message?id=123&amp;token=0lCQPVTc8WCNP2FxocbC7Q==</code>  </li>
<li>此时token值已经经过加密，在控制器message方法中打印token参数，可以成功打印出123</li>
</ul>
<h4 id="返回信息加密"><a href="#返回信息加密" class="headerlink" title="返回信息加密"></a>返回信息加密</h4><p>返回信息的加密原理上跟解密一样，而且本文重点也不在这，所以这里就简单说一下思路。</p>
<ul>
<li>包装<code>HttpServletResponse</code>对象，添加一个<code>toByteArray()</code>方法返回输出缓冲区的内容</li>
<li>在过滤器中先调用<code>doFilter</code>执行请求，之后使用<code>toByteArray()</code>方法得到缓冲区字节，在进行加密。  </li>
</ul>
<h3 id="方案二：切面编程"><a href="#方案二：切面编程" class="headerlink" title="方案二：切面编程"></a>方案二：切面编程</h3><p>使用了Spring的AOP后，解决这个问题就变的轻松加愉快了。关于AOP这里就不做详细描述了。</p>
<h4 id="AESAspect类"><a href="#AESAspect类" class="headerlink" title="AESAspect类"></a>AESAspect类</h4><p>声明切面。</p>
<ul>
<li><code>@Component</code>注解用于声明组件。</li>
<li><code>@Aspect</code>注解用于声明切面。</li>
<li><code>@Pointcut</code>注解声明切点，括号里是切点表达式，这里定位到UserService类的message方法</li>
<li><code>@Around</code>声明是环绕通知方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"AESAspect"</span>)</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESAspect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line"></div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"execution(* com.magicwolf.UserService.message(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messagePointcut</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Around</span>(<span class="string">"messagePointcut()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> UserModel <span class="title">messagePointcut</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Object[] args = point.getArgs();</div><div class="line">		String id = (String) args[<span class="number">0</span>];</div><div class="line">		String key = userDao.getAESKeyByUserId(id);</div><div class="line">		AESCodec.decrypt((String) args[<span class="number">1</span>], key);</div><div class="line">		<span class="comment">// 执行</span></div><div class="line">		UserModel result = (UserModel) point.proceed(args);</div><div class="line">		<span class="comment">// 返回值加密</span></div><div class="line">		result.encrypt(key);</div><div class="line">		<span class="comment">// 返回结果</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UserModel类-1"><a href="#UserModel类-1" class="headerlink" title="UserModel类"></a>UserModel类</h4><p>在UserModel中添加一个加密成员变量的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(String key)</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.userName=AESCodec.encrypt(userName, key);</div><div class="line">	<span class="keyword">this</span>.email=AESCodec.encrypt(email, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="WebTest-servlet-xml"><a href="#WebTest-servlet-xml" class="headerlink" title="WebTest-servlet.xml"></a>WebTest-servlet.xml</h4><p>更改代理方式，使用cglib代理来替换JDK代理。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">```   </div><div class="line">#### 测试</div><div class="line">在浏览器中输入`http://localhost:8080/WebTest/user/message?id=123&amp;token=0lCQPVTc8WCNP2FxocbC7Q==`  </div><div class="line">##### 返回值</div><div class="line">此时返回值已经加密</div><div class="line">``` json</div><div class="line">    &#123;</div><div class="line">    userName: "U/6CJMzF1IRV/HpEjDJPEQ==",</div><div class="line">    email: "kQAV7t4611RYADmDC69odyQmES+MXv+p4OmYMC8fSoU="</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>通过两种方法的对比可以看到，使用切面编程，模块间耦合程度很低，架构清晰，易于实现。</li>
<li>但是这仅仅是一个小小的测试，如果项目规模扩大，想要织入一个功能就需要经过精心的设计，从何处切入，切点如何组织都是需要考虑的。如果没设计好，切面部位或许将成为一个重灾区（认证系统里的加密切面就显得有些凌乱，庞杂，但我也不知道该如何优化）</li>
<li>还有个小问题，拦截器里应该是可以直接对<code>request</code>对象进行包装的，可是我在拦截器里进行包装却没有效果，可能是此处的<code>request</code>对象只是一个拷贝吧。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做基于Oauth2.0协议的认证系统，整体认证流程已经完成，但是Oauth2.0需要HTTPS配合，否则会有安全隐患。由于没有HTTPS证书，所以只有自己进行数据加密。利用切面编程可以在不改变原有模块的情况下加入加密功能，与原有模块解耦。&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;以一个常见的场景举例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端传个服务器一个用户ID和token值，服务器验证token并根据ID返回数据  &lt;/li&gt;
&lt;li&gt;传来的token参数已经加密，服务器要根据用户ID查出AES密钥，进行解密，再验证token，并把返回信息加密。
    
    </summary>
    
      <category term="Java" scheme="http://magicwolf.xyz/categories/Java/"/>
    
    
      <category term="Spring MVC" scheme="http://magicwolf.xyz/tags/Spring-MVC/"/>
    
      <category term="AOP" scheme="http://magicwolf.xyz/tags/AOP/"/>
    
  </entry>
  
</feed>
